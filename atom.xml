<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qiyexuxu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.keeplearning.group/"/>
  <updated>2018-11-14T08:02:29.107Z</updated>
  <id>http://blog.keeplearning.group/</id>
  
  <author>
    <name>David Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pytorch 学习笔记（一）</title>
    <link href="http://blog.keeplearning.group/2018/11/14/2018/11-14-pytorch1/"/>
    <id>http://blog.keeplearning.group/2018/11/14/2018/11-14-pytorch1/</id>
    <published>2018-11-14T07:52:00.000Z</published>
    <updated>2018-11-14T08:02:29.107Z</updated>
    
    <content type="html"><![CDATA[<p>1 . <code>Tensor</code> 可以认为是一个高维数组，可以使用 GPU 进行加速。   </p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import torch as t</span><br><span class="line">x = t.Tensor(5, 3)    # 只分配了空间，未初始化</span><br><span class="line">x = t.Tensor([[1, 2], [3, 4]])</span><br><span class="line">print(x)</span><br><span class="line"># 使用 [0, 1] 均匀分布随机初始化二维数组</span><br><span class="line">x = t.rand(5, 3)</span><br><span class="line">print(x)</span><br><span class="line"># 查看 x 的形状</span><br><span class="line">print(x.size())</span><br><span class="line"># 查看 x 中列的个数，两种写法等价</span><br><span class="line">print(x.size()[1])</span><br><span class="line">print(x.size(1))</span><br></pre></td></tr></table></figure></p><p>Output:<br><img src="http://wx4.sinaimg.cn/mw690/79225320gy1fx7j8w2u2qj20z9092wf3.jpg" alt="运行结果"><br><code>torch.Size</code> 是 tuple 对象的子类，因此它支持 tuple 的所有操作，如 <code>x.size()[0]</code> 等。<br><a id="more"></a></p><p>2 . 加法的三种写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y = t.rand(5, 3)</span><br><span class="line">print(x + y)   # 加法的第一种写法</span><br><span class="line">print(t.add(x, y))   # 加法的第二种写法</span><br><span class="line"># 加法的第三种写法：指定加法结果的输出目标为 result</span><br><span class="line">result = t.Tensor(5, 3)</span><br><span class="line">t.add(x, y, out=result)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;最初 y&apos;)</span><br><span class="line">print(y)</span><br><span class="line"># 普通加法，不改变 y 的内容</span><br><span class="line">y.add(x)</span><br><span class="line">print(y)</span><br><span class="line"># inplace 加法，改变 y 的内容</span><br><span class="line">y.add_(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>函数名后面带下划线 <code>_</code> 的函数会改变 Tensor 本身。</p><p>3 . Tensor 与 Numpy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[:, 1]   # 选取 x 的第一列所有内容，与 Numpy 相似</span><br></pre></td></tr></table></figure><p>Tensor 和 Numpy 的数组之间的互操作非常容易且快速，对于 Tensor 不支持的操作，可以先转换为 Numpy 数组处理，之后再转换回 Tensor。  </p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import tensor as t</span><br><span class="line">import numpy as np</span><br><span class="line">a = t.ones(5)   # 新建一个全 1 的 Tensor</span><br><span class="line">print(a)</span><br><span class="line">b = a.numpy()   # Tensor ----&gt; Numpy</span><br><span class="line">print(b)</span><br><span class="line">a = np.ones(5)</span><br><span class="line">print(a)</span><br><span class="line">b = t.from_numpy(a)   # Numpy ----&gt; Tensor</span><br><span class="line">print(b)</span><br><span class="line"># Tensor 与 Numpy 共享内存</span><br><span class="line">b.add_(1)    # 以 _ 结尾的函数会修改 Tensor 自身</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></p><p>Output:<br><img src="http://wx4.sinaimg.cn/mw690/79225320gy1fx7kkcurzdj214m05mjrm.jpg" alt=""><br>Tensor 和 Numpy 对象共享内存，如果其中一个变了，另外一个也会随之改变。</p><p>4 . 如果想获取某一个元素的值，可以使用 <code>scalar.item</code>，直接 <code>tensor[idx]</code> 得到的还是一个 tensor，一个 0-dim 的 tensor，一般称为 scalar。  </p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scalar = b[0]</span><br><span class="line">print(scalar)</span><br><span class="line">print(scalar.size())  # 0-dim</span><br><span class="line">print(scalar.item())</span><br></pre></td></tr></table></figure></p><p>Output:<br><img src="http://wx2.sinaimg.cn/mw690/79225320ly1fx7m1ulcjhj213s02uaa3.jpg" alt="">  </p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> # 注意和 scalar 的区别</span><br><span class="line">tensor = t.tensor([2])</span><br><span class="line">print(tensor)</span><br><span class="line">print(tensor.size())</span><br><span class="line"># 只有一个元素的 tensor 也可以调用 tensor.item()</span><br><span class="line">print(tensor.item())</span><br></pre></td></tr></table></figure></p><p>Output:<br><img src="http://wx4.sinaimg.cn/mw690/79225320ly1fx7misoww4j213x02yq2v.jpg" alt=""></p><p>5 . <code>t.tensor()</code> 总会进行数据拷贝，新 tensor 和原来的数据不共享内存，如果想要共享内存的话，建议使用 <code>torch.from_numpy()</code> 或者 <code>tensor.detach()</code> 来新建一个 tensor，二者共享内存。  </p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tensor = t.tensor([3, 4])</span><br><span class="line">old_tensor = tensor</span><br><span class="line">new_tensor = t.tensor(old_tensor)</span><br><span class="line">new_tensor[0] = 1111</span><br><span class="line">print(old_tensor)</span><br><span class="line">print(new_tensor)</span><br><span class="line">new_tensor = old_tensor.detach()</span><br><span class="line">new_tensor[0] = 1111</span><br><span class="line">print(old_tensor)</span><br><span class="line">print(new_tensor)</span><br></pre></td></tr></table></figure></p><p>Output:<br><img src="http://wx3.sinaimg.cn/mw690/79225320gy1fx7mtib98oj214103ojrh.jpg" alt=""></p><p>6 . Tensor 可以通过 <code>.cuda</code> 方法转换为 GPU 的 Tensor，从而享受 GPU 带来的加速运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在不支持 CUDA 的机器上，下一步还是在 CPU 上运行</span><br><span class="line">device = t.device(&quot;cuda:0&quot; if t.cuda.is_available() else &quot;cpu&quot;)</span><br><span class="line">x = x.to(device)</span><br><span class="line">y = y.to(device)</span><br><span class="line">z = x + y</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 . &lt;code&gt;Tensor&lt;/code&gt; 可以认为是一个高维数组，可以使用 GPU 进行加速。   &lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import torch as t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = t.Tensor(5, 3)    # 只分配了空间，未初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = t.Tensor([[1, 2], [3, 4]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 使用 [0, 1] 均匀分布随机初始化二维数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = t.rand(5, 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看 x 的形状&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(x.size())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看 x 中列的个数，两种写法等价&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(x.size()[1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(x.size(1))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/mw690/79225320gy1fx7j8w2u2qj20z9092wf3.jpg&quot; alt=&quot;运行结果&quot;&gt;&lt;br&gt;&lt;code&gt;torch.Size&lt;/code&gt; 是 tuple 对象的子类，因此它支持 tuple 的所有操作，如 &lt;code&gt;x.size()[0]&lt;/code&gt; 等。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Pytorch" scheme="http://blog.keeplearning.group/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>自学编程那些事儿</title>
    <link href="http://blog.keeplearning.group/2017/07/31/2017/07-31-learn-program/"/>
    <id>http://blog.keeplearning.group/2017/07/31/2017/07-31-learn-program/</id>
    <published>2017-07-31T11:47:00.000Z</published>
    <updated>2018-11-07T08:29:37.722Z</updated>
    
    <content type="html"><![CDATA[<p>我本人是从机械专业转过来学习编程的，在这个过程中我大概跟大多数半路出家的人一样，迷茫过，纠结过，努力过，也怅然若失过，同时也有在意想不到的拐角处收获到额外的惊喜。这一路不能说顺顺利利，但也算是跌跌撞撞地走过来了。虽然我的水平还远不至于到了能给别人指点一二的地步，不过我倒不介意把我认为最重要的几点浅薄的看法分享给大家。</p><a id="more"></a><h3 id="选择好一个方向很重要"><a href="#选择好一个方向很重要" class="headerlink" title="选择好一个方向很重要"></a>选择好一个方向很重要</h3><p>我相信大多数想入门编程并且未来想在 IT 领域中找到一份工作的人都听过几个热门的词，一会儿是人工智能（AI），一会儿是大数据，一会儿是 Android 开发 iOS 开发之类的，不然就是运维，或者前端、后端之类的。在最开始选择进入 IT 领域的时候，你必须花时间在这些五花八门的方向中找出一个你最感兴趣并且认为自己能够持之以恒地坚持学下去的方向。你可以向有经验的人了解这些方向都是干嘛的，找不到人的话也可以通过互联网求助，譬如知乎等等各大网络平台，搞清楚了这些方向是干嘛的，接下来就是好好规划自己的学习路线，第一步做什么，第二步做什么等等等等，现在网络资源这么发达，想找到自己的学习路线并不难，况且还有慕课网、coursera、edx 等在线教育平台可以利用。总之，利用一切你可以利用到的手段，选择一个你真正感兴趣的方向，即便为了钱而感兴趣也行，只要你认为碰到困难的时候你能坚持下去。  </p><h3 id="几个方向都精通只是锦上添花"><a href="#几个方向都精通只是锦上添花" class="headerlink" title="几个方向都精通只是锦上添花"></a>几个方向都精通只是锦上添花</h3><p>在寻找学习方向的时候，可能很多人会觉得自己好像对好几个方向都非常感兴趣，这个时候怎么办呢？我想对你说的是，虽然方向很多，但是在最开始学习的时候，你必须选择并且仅仅只能选择其中的一个，付出努力持之以恒地把它学好即可，其他的，无论你再有兴趣，也应该暂时地舍弃掉，不要去管它。我这么说主要是基于以下两点：</p><p>第一，你在真正找工作的时候，是凭借你的一技之长去投岗位的，请注意，一定是一技之长，每个公司列出那么多岗位给应聘者，并没有要求应聘者同时兼顾好几个方向的技能，相对于什么都知道一点但是什么都不够深入的人，他们一定是要那些在某一个方面有所长能够给他解决这一个方面的实际问题的人，至于其他方面，他们可以再去招聘那些在其他方面有所长的人，而不需要一个人兼顾这么多，大多数时候，一个人来做反而做不好；</p><p>第二，人每天的精力是有限的，无论你用它做了什么，每天用完即没有，我曾经对自己专注在一件事情上的时间做了一个粗略的统计，我指的是严格专注在一件事情之上，减去那些喝水、散步、走神的时间，一天顶多顶多只有 6 个小时，而且每周并不能做到每天都能有这么高的效率，通常工作日五天能有两天有这个效率就非常不错了，而且人会感觉非常疲劳。一天 24 小时，全身心铺在一件事情上的时间只能有 6 个小时，换而言之，只有 1/4 的有效工作时间，事实上 5 天的工作日只有顶多只有两天有这么高的效率，这个数字说出去是很吓人的，但是对不起，这真的就是事实，我不知道大家统计过没有，虽然每个人的精力略有差别，但是我相信这个数字的上下浮动不会太大。而随着你在某一个技术方向深入程度的增加，你一定会觉得你不会的东西需要弄明白的东西太多了（当然你也许会觉得有些东西我不需要弄得那么明白和熟练，用到的时候查一查会用就行，下文我会说明为什么这么想是有问题的），你的精力有限，想要弄明白这么多的东西，进一步做到让你的一技之长足够长，真的很难，这是我的切身体会，你真的不太可能让你的一技之长足够长的同时又能兼顾好其他方面的技术。</p><p>事实上，我见过在某一个技术方向足够熟练之后，由于个人的兴趣或者个人的需要在其他方面也做得比较好的人，但是，我还真没有见过同时一下子从很多个技术方向出发最后都能够做得非常非常好的人，我相信这种人即便有，也是在少数中的少数吧。先做好自己的一技之长，还有一个原因是，有很多技术方向是有共通点的，你做好了这个方向的一技之长，将来有需要精通其他方向的技术之后，触类旁通会相对容易一些。行业里所说的“全栈工程师”，这大多是环境要求，后来技术背景不断更换之后所带来的一个结果，而不是最初出发的一个目的。总而言之一句话，几个方向都精通只是锦上添花，但这并不要求是必须的，最初学习的时候，你最好只选择一个方向进行突破。  </p><h3 id="专注、持续、有效的投入"><a href="#专注、持续、有效的投入" class="headerlink" title="专注、持续、有效的投入"></a>专注、持续、有效的投入</h3><p>在最初选择技术方向的时候，我刚说了最好专注在一个方向上，事实上不仅如此，在你严格按照学习路线图进行学习的时候，你接触到某一方面的知识，譬如 Linux shell 脚本编程，那么，你也需要在短期内只专注 shell 怎么写，否则，一个基础没打牢固就跑去弄别的，最后的结果只能是捡了芝麻丢了西瓜，狗熊掰棒子而已。明确学习路线之后，需要一步步按照学习路线的规划，稳扎稳打地一个个把每一步要求的知识过关。</p><p>一个技术岗位的价值，首先取决于这个技术方向本身，如果你选择的技术方向是一个急需紧缺的类型，那么这个技术方向肯定价值会比较高（说的俗一点，就是钱多）；其次取决于选择这个技术岗位的人本身的不可替代性，也就是说，一个技术岗位的人能够把工作做得越出色，别人越难以取代，这个人的价值也就越大。那么，怎样变得越来越不可替代呢？或者，换句话说，怎样把工作做得比大多数人都优秀呢？那就需要在很多别人难以下功夫的地方多下功夫。譬如很多重要的东西，别人由于畏难而退却而你搞明白了，别人忽略的一些重要的细枝末节你掌握了，等等等等，就是静下心来把别人啃不好的硬骨头给啃下来，并且这些硬骨头还是能有效提高你能力的知识点。这也就是我上文说的需要把一些别人不在意的同时又很重要的一些东西弄得比较明白的原因，因为这是你与其他人的差别所在，你做的越好，你的不可替代性就会越强，从而你的价值就会越大。做到这些，就需要专注、持续、有效的投入了，所谓专注就是一心一意做好一件事情，do one thing and do one thing well，所谓持续就是不能三天打鱼两天晒网，大家估计都有体验，如果学习一门技术，刚入门然后断了一段时间，再次投入进去感觉很多东西特别陌生，捡起来重新开始花的时间代价会比较大，长此以往会陷入低水平重复的怪圈，所以我这里强调持续性，打铁要趁热，不要轻易被其他的事情所打断，所谓有效的投入指的是不能低水平重复，每一次的努力都要给自己带来实实在在的成长。</p><p>一万小时理论被认为是成为某个领域专家所花费时间的及格线，也是其必要条件，但如果只是低水平地做一些简单的重复工作的话，那再怎么样也成不了杰出专家，我们需要啃一些能有效地提高我们水平的硬骨头。顺便说一下一万小时，我算了一下，如果每天 6 个小时的投入的话，10000 小时的花费大概需要 1667 天，大概需要 4.5 年的时间，这还不包括周末和各种假日。所以，在一个领域内成为专家级的水平需要付出多少大概可想而知了，沉下心来戒骄戒躁好好努力才是王道。  </p><h3 id="系统的知识体系很重要"><a href="#系统的知识体系很重要" class="headerlink" title="系统的知识体系很重要"></a>系统的知识体系很重要</h3><p>做事情专业还是业余，成系统的知识在其中起着非常重要的作用。那么什么是专业呢？这不仅仅是面对已知的问题你能提供有效的解决方案，还有就是针对未知的问题，你能通过有效的规范的步骤，一步步地找出问题症结所在，一点点地让问题浮出水面，或者至少，你能提供一些有利于问题解决的有价值的参考出来。而业余的人，解决问题有时候就跟碰运气一样，有时候能得到解决，有时候却不怎么灵。在一个领域内比较专业的人，他的努力所带来的后果在很大程度上是可以预期的，究其原因，就是其背后有系统的知识体系作为支撑。拿算法来说吧，很多人觉得不重要，怎么说呢？重不重要的结论我先不给出来。我只想说，你认真地掌握了它，再来谈重不重要，得出的结论会更靠谱。实际上，在大多数编程场景中，很少让你写出具体的算法，但算法思想的应用还是比较多的，受过良好算法训练的人，拿来一些实现同样功能代码，他能很快分辨出代码是写的好还是烂，这就是专业与不专业的区别，而对于算法思想的领悟，又需要一定的计算机数学基础为铺垫，这背后就是一整套的系统知识体系。所以说，系统的知识体系，直接关系到你专业还是不专业，而你专业还是不专业，背后又关系到你是不是不可取代的，你的价值是多少。  </p><h3 id="到底要不要自学编程"><a href="#到底要不要自学编程" class="headerlink" title="到底要不要自学编程"></a>到底要不要自学编程</h3><p>经常听到有人问，我不是计算机科班出身的，可是我对编程很感兴趣，到底要不要学编程？或者，我现在年纪也不小了，二十四五岁的高龄了（我笑而不语），学编程还来得及吗？等等诸如此类的要不要学编程问题。我首先是不太愿意回答这样子的问题，原因是我觉得这些人中有相当一部分在提出这个问题的时候心里其实早就有答案了，就是觉得自己可能不太适合，而且岁数比较大等等各种能够说服自己放弃的理由，即便被我说服了，一个脑袋发热一头扎了进去，一碰到困难马上就觉得自己不合适了，想放弃了。对此，我只能说，你不仅仅只是不适合学习编程，你干其他的事情估计也不太可能干得好。我总认为，只要自己努力和积极向上，那么无论处于什么样糟糕的境地，都能找到自己的出路，没有这个自信人生简直都不要活了。有了这个自信的话，对于很多自己内心真正想从事的一些工作，只要是积极乐观的，又何妨一搏呢？梁漱溟先生不也是自学成才，当上了北大教授吗？一般人像他那样子才中学毕业，在这条路上估计早就自我放弃了，他不但通过自学成为了北大教授，而且还教出了像冯友兰、朱自清等一批优秀的学生。毛泽东主席在年轻的时候就写下了这样子的诗：自信人生两百年，会当水击三千里。当然了，不是一般人都有伟人一般的豪迈意气，但是对于我们每个人自己的人生，豪迈豪迈的勇气我们还是应该有的。总之，大胆去选择自己的梦想，只要是积极向上的，尽可努力去拼搏，人立于天地之间，无论现实怎么糟糕，都能找到自己的出路，反正，我就这么自信。  </p><p>最后，祝学习愉快。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本人是从机械专业转过来学习编程的，在这个过程中我大概跟大多数半路出家的人一样，迷茫过，纠结过，努力过，也怅然若失过，同时也有在意想不到的拐角处收获到额外的惊喜。这一路不能说顺顺利利，但也算是跌跌撞撞地走过来了。虽然我的水平还远不至于到了能给别人指点一二的地步，不过我倒不介意把我认为最重要的几点浅薄的看法分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.keeplearning.group/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="公众号" scheme="http://blog.keeplearning.group/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>说说人工智能、大数据、医疗和教育（三）</title>
    <link href="http://blog.keeplearning.group/2017/07/23/2017/07-23-ai-bigdata/"/>
    <id>http://blog.keeplearning.group/2017/07/23/2017/07-23-ai-bigdata/</id>
    <published>2017-07-23T02:50:00.000Z</published>
    <updated>2018-11-07T08:31:08.833Z</updated>
    
    <content type="html"><![CDATA[<p>在正式开始今天的主题之前，我想跟大家说的是，我们真的处在了一个非常非常好的时代，很多行业里的人士普遍认为，中国仍然有很好的长期发展的机遇，从 1990 年开始的 40 年间，中国会超越美国成为世界第一大经济体，并且，如果政治稳定的话，之后还会伴随着这个浪潮的惯性继续向前发展很长一段时间。而我们这帮 90 后们，算算时间点的话，恰恰会是这个高速发展时代的中坚力量。我们运气很好地碰在了一个高速发展的国家里，并且，又同样运气很好地碰在了人类历史上第四次技术革命发展的转折点 —— 从信息时代向智能时代转变的关键点上。《必然》一书的作者凯文凯利认为，以后几十年里人类生活离不开的产品还远远没有被发明出来。其实一个人一生中很难碰到一次技术革命的浪潮，而我们居然在一个青春年华的合适年纪里神奇地遇上了，这是我们的幸运。对于这一波浪潮而言，我们可以将其看成是每个人一生中只能玩一次的游戏，错过了就是错过了，再没机会，到底是眼巴巴看着还是投身其中闯荡一番？我相信很多人心中其实都有了答案。那么，时代的机遇究竟在哪里呢？这是今天的文章重点谈的内容。首先，既然我们是处于第四次技术革命的关键转折点上，我们不妨来回顾一下之前的三次技术革命里都发生了什么。</p><a id="more"></a><p>人类历史上的第一次工业革命发生在 18 世纪末的英国，它是以蒸汽机的发明为标志的，因此也叫做蒸汽机的革命，我们都知道蒸汽机的发明者是瓦特。但是实际上，在瓦特之前蒸汽机就有了，瓦特只是和当时著名的工厂主马修博尔顿（关于马修博尔顿见<a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E4%BF%AE%C2%B7%E5%8D%9A%E5%B0%94%E9%A1%BF" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E9%A9%AC%E4%BF%AE%C2%B7%E5%8D%9A%E5%B0%94%E9%A1%BF</a>） 一起合作，改良了传统的效率低下的纽科门蒸汽机，在此基础之上发明了一种万用蒸汽机。瓦特的发明奠定了第一次工业革命的基础，并且， 他还发展出马力的概念以及以他名字命名的功率的国际标准单位——瓦特。最初的纽科门蒸汽机只是供英国的一些矿井使用的，不但效率低下，而且适用性很差。而瓦特发明的万用蒸汽机可以适用于诸如纺织、陶瓷等等许多在之前大部分工作只能通过人力操作的行业。很多原来存在的产业，只要运用上蒸汽机，就会带来生产效率的极大提升。第一次工业革命给人类社会带来的积极影响，可以用马克思的一句话来说明：“资产阶级在其不到 100 年的阶级统治中所创造的生产力，比过去一切时代创造的全部生产力还要多、还要大”。当然我们这里讲的是积极的一方面。消极的一方面是，在纺织、瓷器等等蒸汽机能够渗透到的领域，一些传统的小作坊被更有效率、更标准化、生产出的产品质量更好的蒸汽机所取代，之前的经济结构被摧毁，很多人纷纷破产，从中产阶级一下子沦为了赤贫。拥有生产资料的工厂主们为了便于竞争，就雇佣一些低工资的童工，或者随意延长工人的劳动时间。也就在那个时代，英国发生了空前绝后工人运动，催生了马克思主义。技术的进步给当时的英国社会带来了很大的社会动荡，最初诅咒它的人比拥抱它的人多很多。最初享受到技术革命带来的好处的，只是瓦特和像博尔顿这样懂得运用蒸汽机技术的工厂主，那个时候的英国贫富分化非常严重。</p><p>那么，英国是怎么消除蒸汽机革命所带来的负面影响的呢？</p><p>那就是开拓全球殖民地，推行自由贸易，进行资本输出。实际上我们也可以看到，那个时候的很多次战争，就中国而言，总是动不动让中国开放这个港口那个港口什么的，这就是推行自由贸易的结果。实际上通过这种手段，也让第一次工业革命的成果得以全球化。    </p><p>第二次工业革命是电的革命，同蒸汽机的革命一样，电的使用在原来存在的很多领域中也造成了革命性的冲击，带来了生产效率的极大提升。并且，最初受益的也只是少部分懂得如何使用电并且能够拥有电的人，新的技术的应用导致了大量的失业潮和破产潮，那个时候的很多代表性的人物，如通用电气（GE）公司的创始人爱迪生、AT&amp;T的创始人亚历山大贝尔、福特公司的创始人亨利福特、奔驰汽车的创始人卡尔本茨（德国），不少到现在也依然是很多创业家心中的偶像。实际上，那个时候，在美国的贫富分化程度达到了北美殖民以来的最高点，不少激进的工人运动也发生在那个时期，石油大王洛克菲勒聚集的财富占了全美国的 1%，说个题外话，很多人对洛克菲勒的认识可能只是知道他很有钱并且做慈善出资建立了北京协和医院和协和医学院，当年协和医院的奠基的时候，洛克菲勒的儿子小洛克菲勒，坐了个把月的轮船，亲自来到了北京参加了这个奠基仪式，当然现在的北京协和医院已经跟洛克菲勒家族没啥关系了（早就充公了）。美国人抵消第二次工业革命的消极影响是通过开发西部广袤的还未被开发出来的处女地。而德国人就没那么幸运了，空前的社会矛盾导致他们把希特勒代表的纳粹主义分子推上了台（所以中国的制度好还是国外的制度好？真的不好讲）。实际上，美国19世纪中期南北战争北方战胜，扫除了发展资本主义的障碍——奴隶制，促使美国在第二次工业革命中采用新技术，用了大约 30 年的时间一举超过了英国，成为了世界第一大经济体。  </p><p>第三次技术革命是二战之后以计算机技术的兴起为基础发展起来的信息革命。实际上在过去 30 年的时间里，真正上来说受益于信息时代的只有美国和中国，这两个国家贡献了全球一半以上的 GDP 增长，对于美国来说不需要讲太多，诞生了一大批信息时代的明星公司：Google、Apple、Microsoft等等等等（了解一下 Google 的话可以看看我公众号里之前的一篇文章《Google 传奇》），对于这些公司的创始人来说，他们都在自己年富力强的时候幸运地赶上了信息革命的大潮，与我们现在很多的 90 后赶上智能革命的浪潮一样（偷笑中）。不过对于美国而言，信息革命技术的进步造成的社会问题也是显而易见的，美国人的失业率比较高，有很多游手好闲无所事事吃低保的人，因为他们的工作机会被新的技术进步所取代了。譬如特斯拉汽车公司，在它的汽车装配间里全部都是一个个软件技术操纵的机械手臂，几乎没有工人。为此特斯拉的门前总能招来一些抗议者，他们抗议特斯拉不给他们提供工作机会而用一个个的机械手臂去代替他们，不过这个大的趋势真的是不可逆转不以人的意志为转移。去年美国总统大选，特朗普一直在说要解决美国人的就业问题，因为很多很多人没有了工作机会。与此相比，同为贡献 GDP 增长最多的两个国家，中国则要幸运得多，这是因为中国的基础太薄弱了，从 1979 年改革开放起，中国用了 30 多年的时间，走完了西方国家 200 多年的工业化道路，并且同时进行了信息革命，与整个时代一起步入了信息时代的末期智能时代的初期。在这期间的人力资源的消耗是非常大的，所以在中国基本上没有看到像美国那样子的情况发生。不过在智能时代中国可就没那么幸运了，所以诸位真的要未雨绸缪啊。实际上现在就可以看出一些迹象了，大家都知道中国是世界工厂，譬如富士康，像 iPhone 手机之类的电子产品大都是在富士康生产和组装的，这些精密的电子产品对于组装工人的技术性要求还是比较高的，但是，有消息称，富士康正在加紧研制智能机器人，将这些智能机器人投放到生产产线上，取代现在的技工的工作。    </p><p>其实不仅仅只是这些取代，我昨天的文章里也谈过，像医生之类的工作，也有可能被机器大部分取代掉，并且昨天的文章里也说了详尽的理由。其实不止医生啊，像记者编辑，有些人可能不知道，实际上在美国，《纽约时报》之类的报纸，很多的文章都是机器写的，通过大量的文章训练出一个模板，然后把新闻信息输入进去，机器就把文章写出来了。未来不止医生、记者之类的行业，实际上将现有的很多很多行业，融于智能时代的思维来思考的话，很多很多的东西都将产生变化，这些变化会像历史上几次技术革命所带来的影响一样。  </p><p>从以上历史的回顾之中我们可以知道，新的技术进步所带来的生产力的提升，会让很多猝不及防的人因此丢了工作，刚开始受益的也只是很少的那一部分掌握了新技术并且懂得如何应用新技术的群体。与此同时我们也应该看到，新的技术进步在取代原有的工作的同时，一定会诞生一些新的职业，现在的很多职业，譬如程序员等，在以前是不存在的。那么为什么历史上新的职业旧时代的人却做不了呢？因为学习成本高并且难以适应，学习一门新的技术，不仅仅是学习这些东西本身而已，还有对于过去职业习惯所养成的一些思维定势的改变，而这，对于过去从事一项熟悉的工作几十年的人来说，是非常困难的。这就涉及到我昨天说的今天想讲的一个话题了 —— 教育。  </p><p>其实在新的时代背景下，大家都找到了未来教育形式的一个方向，即互联网教育。像 Coursera、edx、网易公开课等在线教育平台，把一些世界名校的课程放在了互联网上，让大家都可以便捷地享受到以前只有少数人才能得到的知识服务，那么，我有一个疑问就是，这些宝贵的东西放在互联网上，为什么得不到爆炸式的反馈效果呢？选择在线学习的人依然是非常非常少的，原因在哪儿呢？还有，智能时代以后取代的是现在很多人所从事的一些智能化的工作，譬如算算表单的会计呀，画画图纸的设计师呀，等等这些工作在未来一定程度上甚至全部都可以被机器所取代掉，由此看来现在的教育教授的很多东西在未来是没有用的，那么什么样子的教育可以在一定程度上减轻未来随之到来的失业潮呢？以后究竟需要什么样的教育呢？而为了应付未来教育上的需求，我们现在应该做好哪些事情呢？对于这些问题，我没有特别好的答案，只有一些粗浅的思考分享给大家，欢迎对这些问题有见解的人通过文末的方式来和我交流。我觉得，如果真正解决了我上面所提的那些问题，那么未来教育的问题，也肯定就解决了。  </p><p>为什么互联网上放了那么多好的教育资源，但是选择在线教育的人还是很少？我觉得其中有一方面的问题就是教育的形式的问题。我们从小习惯了课堂上互动式的教育，也习惯了同学之间知识的交流，如果能在在线教育的形式中融于课堂仪式感和交流互动的元素，譬如利用 VR 技术营造一种课堂的氛围等等，那么在线教育的形式一定能够被越来越多的人所接受。  </p><p>什么样子的教育可以减轻未来随之而来的失业潮？这个问题的答案我不知道，更诚实的一点的说法是，我有一点看法，但是由于过于粗浅经不起斟酌，所以也就不说出来了。不过，我觉得过去之所以会出现那么大的失业潮，部分原因是因为不能教授旧时代的人新时代的思维和新时代的技能，其中有一个很重要的原因之一是，那个时候的教育被局限的很厉害，只能通过大学里校园教育的方式获得，而对于未来，互联网触手可及，这个限制可以说不存在了，所以，我觉得可以用互联网教育的方式更快地传播新的技能以减轻失业潮造成的影响。  </p><p>未来需要什么样子的教育呢？机器智能所取代的是人现在所从事的很多智能化的工作，也就是说，现在人所从事的很多技能教育将来都不需要了。既然很多技能教育未来不需要，那么我认为其实未来教育教人的东西，应该是更让人能获得快乐和精神享受的东西，譬如诗词歌赋、绘画艺术、历史哲学等等，人的双手被解放了之后，很多工作完全不需要人来做了，所以人会更想追求精神层面的快乐。  </p><p>以上就是我对教育方面的一些粗浅的认识，欢迎持有观点的朋友通过下面的方式来和我交流。我一直觉得，人的生活一定要健康、幸福和快乐，并且我乐于用自己的所学给更多的人带来健康、幸福和快乐，所以其实从第二篇文章开始，我主要谈了未来智能社会里医疗和教育的话题，因为，医疗能带给人健康，而教育，能使人快乐。我们每天所写的并不仅仅只是一行行有趣的代码而已，而且这些东西，在未来，能让更多的人健康、幸福和快乐起来。我想在未来，在医疗和教育领域，我要么成为一个开拓者，要么加入别人成为追随者，因为这两样东西，我感觉是渗透在我的灵魂深处让我真正想去做的事业。希望在智能时代我们这帮 90 后们都能把握自己的机遇，找到自己一生的事业，无负于一个伟大的时代对我们最有价值的馈赠吧！  </p><p>谢谢耐心看完这三篇文章的人，对于这个话题，以这三篇文章的篇幅，到此告一段落。以后有机会我们可以接着聊。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正式开始今天的主题之前，我想跟大家说的是，我们真的处在了一个非常非常好的时代，很多行业里的人士普遍认为，中国仍然有很好的长期发展的机遇，从 1990 年开始的 40 年间，中国会超越美国成为世界第一大经济体，并且，如果政治稳定的话，之后还会伴随着这个浪潮的惯性继续向前发展很长一段时间。而我们这帮 90 后们，算算时间点的话，恰恰会是这个高速发展时代的中坚力量。我们运气很好地碰在了一个高速发展的国家里，并且，又同样运气很好地碰在了人类历史上第四次技术革命发展的转折点 —— 从信息时代向智能时代转变的关键点上。《必然》一书的作者凯文凯利认为，以后几十年里人类生活离不开的产品还远远没有被发明出来。其实一个人一生中很难碰到一次技术革命的浪潮，而我们居然在一个青春年华的合适年纪里神奇地遇上了，这是我们的幸运。对于这一波浪潮而言，我们可以将其看成是每个人一生中只能玩一次的游戏，错过了就是错过了，再没机会，到底是眼巴巴看着还是投身其中闯荡一番？我相信很多人心中其实都有了答案。那么，时代的机遇究竟在哪里呢？这是今天的文章重点谈的内容。首先，既然我们是处于第四次技术革命的关键转折点上，我们不妨来回顾一下之前的三次技术革命里都发生了什么。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.keeplearning.group/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="公众号" scheme="http://blog.keeplearning.group/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>说说人工智能、大数据、医疗和教育（二）</title>
    <link href="http://blog.keeplearning.group/2017/07/22/2017/07-22-ai-bigdata/"/>
    <id>http://blog.keeplearning.group/2017/07/22/2017/07-22-ai-bigdata/</id>
    <published>2017-07-22T02:50:00.000Z</published>
    <updated>2018-11-07T08:32:48.975Z</updated>
    
    <content type="html"><![CDATA[<p>在昨天的文章中我们详细说明了什么是机器智能，用数据驱动获取机器智能的方法，谈了机器智能的一个必要因素就是大数据，并且讲了大数据对于人类生活的预测指导作用，今天我们在此基础之上，主要来谈谈医疗的内容，基于一篇文章的篇幅所限，明天我们再来谈教育。  </p><p>当今医疗领域所面对的问题主要有三个方面：第一，看病贵；第二，医疗资源分配不均衡，好的医疗设备和技术精湛的名医大都集中在经济比较发达的地区，经济不发达地区的人面临的不仅仅是看不起病的问题，同时还有生了重病找不到好的医生的问题；第三，很多疾病，譬如癌症，人类仍然没有找到可靠的能够使其得到稳定治愈的方法。其实针对这三个方面的问题，大数据和机器智能的发展都能够提供一个理论上行得通的解决方案。下面我们一一来谈。</p><a id="more"></a><p>首先是看病贵的问题。那么为什么看病会如此昂贵呢？大致有以下三个方面的因素。  </p><p>第一，医学人才培养的成本很高，对于怎样成为一个顶尖的医学技术人才来说，就中国而言，维基百科中是这么描述的：  </p><blockquote><p>从大学第一个本科开始的。一般有五年制，七年制和八年制，分别授予医学学士，医学硕士和医学博士的学位。七年制和八年制统称为长学制。获得医学学士学位的毕业生，可以参加执业医师考试。五年制毕业的医学学士，可以继续攻读医学硕士及博士，两者同样需时三年。七年制毕业的医学硕士，可以继续攻读医学博士，如果攻读本校的医学博士，可以只参加转博考试，通过考试及面试后，再读3年，可以获得医学博士学位。  </p></blockquote><p>也就是说，从高中毕业算起，到获得本科学士学位再到参加执业医师考试获得从业资格，至少需要 5 ~ 6 年的时间，而这种技术水平也仅仅只是从医资格的起步水平，大多数情况下，这种技术水平的医生是很难看好病治好病的。获取博士学位，达到高级医师的水平，高中毕业后最短需要接受 8 年、最长需要接受 11 年的医学知识技能教育，这还不包括毕业获得从业资格之后经过大量临床经验和病例积累增长技术水平所用的时间。这么来看，一个优秀医师培养起来不仅仅是耗费了大量青春年华的宝贵时间，还有大量的金钱投入。事实上在美国以及其他国家也与此类似，美国有个笑话是这么说的：一个人从最初接受医学教育到获得外科医生的行医执照的时候，他的中学同学已经结婚生孩子并且事业略有所成了，而他才找到第一份 50 万美元年薪的工作。当然在美国第一份工作就能获得 50 万美元年薪的外科医师是很少的，事实上有不少人在这个过程中要么读不下去中途放弃了，要么读了个半吊子什么都没学好。年薪 50 万美元什么概念呢？我们可以和美国总统的工资比一下就知道到了，这相当于美国总统年薪的 1.25 倍（2016年美国总统的年薪是 40 万美元）。这是相当可观的一笔收入，在中国估计也是不相上下的。从培养一个高级医师的艰难过程来看的话，一个医生的年薪值这么多钱也是可以理解的。   </p><p>那么针对以上所说的医学人才培养成本高的问题，从机器智能和大数据的角度来看，有什么样的解决方法呢？事实上，我们在平时看病的时候，总喜欢找一些年长的医生，这背后的逻辑其实很简单，从业历史长，那么见的病例一定多，经验一定很丰富，最后做出诊断和治疗的精确性也会越高。也就是说，一个医生的医疗水平，是跟他见过的临床医疗病例的数量有正相关关系的。由此我们也可以想到，如果我们给定一个机器学习的模型，给它提供大量的病例数据以训练参数，那么它是不是也可以变得很聪明直至最后超过大部分医生的水平呢？答案当然是肯定的。事实上，在 2012 年的时候，当时有一个新闻不知道大家还记不记得，美国一个高中生，用 760 万例乳腺癌病例，训练出了一个可以精确定位乳腺癌癌细胞位置的算法，其判断准确率达到了 96% 以上，超过了外科医生的水平，这就是一个典型的例子。在 IBM，通过机器学习的方法训练出来了一个沃特森机器人，现在的语音识别技术赋予了这个机器人与人交流的能力，而这个机器人给人看病的水平，相当于一般中级医师，那么为什么这个机器人给人看病的水平还不能超过现在的大部分高级医师呢？因为人类积累的可供机器阅读的电子病例的数量还不够多，换句话说，机器比较笨，它需要大量大量的，比高级医师所见的多很多的数据，才能通过学习保证自己的水平超过高级医师。那么这些电子病例数据量的积累速度是怎样的呢？IBM 给出的数据是，每隔 73 天会翻一番，这种增长速度会保持到 2020 年。</p><p>因此，从这个方面来看的话，机器给人看病超过医师的水平，也只是时间早晚的问题，并且这个趋势一旦形成就基本上不可能逆转，没有任何一个医生可以与它相匹敌了，因为任何一个人的生命都是有限的，在有限的生命中，任何一个医生所见过的病例的数量都不可能比机器多，水平自然会没有机器高。这是未来的一个大趋势。既然在未来可以通过机器给人看病，并且诊断和治疗的精确度还很高，那么也许以后的哪一天，给人看病的话可以采用一种机器流水线的操作，机器 24 小时可以不停歇地运行，而且还不用花那么多的时间和金钱去培养职业的医学技术从业者，自然而然，看病的成本就降下来了。  </p><p>导致看病昂贵的第二个方面的因素是医疗体制造成的。医疗服务的提供方主要有两个：医院和医生的医疗诊所，而这两个服务提供方提供服务的方式，基本上就是一揽子合同，将诊断和治疗融为一体，将经验医疗和精确医疗融为一体，全部包办。这是什么意思呢？下面我来简单解释一下。  </p><p>医生给人看病的时候可以将病人症状的基本情况分为两类，第一类是一看就能够确诊是什么病，背后是什么机理引起的，这种类型我们称之为精确医疗；第二类是单单从表面症状上看，并不能确定背后的患病机理和患病类型，需要医生通过自己的临床经验，进行试探性地检查和探索，直到最后搞清楚所有的患病机理和患病类型，我们把这个过程称之为经验医疗。</p><p>在实际场景中，这两种形式的医疗都同时存在并且融合在同一个医疗服务的提供方之中的。然而我们回过头来看这两种类型的医疗时，他们虽然有着各自的不同特点，但是在最终的结合点上却有一点是共通的。对于精确医疗来说，一旦确诊之后，这种类型疾病大体可以按照流程划分为规范性的治疗步骤，只要按照这种规范性步骤操作，最后就一定能够得到理想的结果，这种规范性的步骤是通过大量有经验的权威性的医师总结出来的，对于这样的疾病类型，完全可以做到将其治疗的过程外包出去，一旦确诊之后，可以通过专门的医疗机构通过预先总结出来的权威性规范性的措施，一步步治疗达到最后的理想结果，这个过程完全可以不用夹杂在同一个医疗服务提供方之中。而对于经验医疗来说，医生通过一系列的试探性的措施和步骤，最后搞清楚各种状况之后，也就是一个各种精确医疗组合的问题了，对于这种情况而言，也可以通过之前说过的精确医疗的方式进行治疗。如果在实际场景中我们可以将疾病的诊断和治疗两个方面分开，对于其中的一些疾病，采用更低成本的人力配置，采用标准化和流水线化的操作，是完全可以很大程度上降低成本的。当然对于医疗体制方面的问题还有许多许多，譬如在疾病的治疗过程中完全是供决定需的关系，就是说，医生在具体的治疗过程按照项目收费，进行哪些项目完全是由医生决定的，不说决定，病人甚至都没法参与进去，这些都是医疗体制中存在的问题，这些体制问题能否找到行之有效的解决途径？讲一讲这些问题可能还需要好多篇文章的篇幅，对于这些问题，我们以后再说吧。  </p><p>影响看病贵的最后一个因素，是药物研发的问题。实际上，对于很多药物而言，其研发大约需要 20 年的时间里投入 20 亿美元的资金，而对于这种药物的专利，在其研发过程的早期就申请了，因为不申请的话就被别人申请走了，从最早期的专利申请，到药物走过几期临床试验最终面世，大约需要十几年的时间，而专利的保护年限只有 20 年，所以等药物真正面世之后，可能只有几年的时间把早期的研发成本收回来，而到了专利到期的那天，一夜之间，药物的价格大约会下降 80% 以上。所以基于这些因素的考虑，一款新药上市之后价格是非常昂贵的。但是对于很多疾病来说，我们是可以通过早期的一些身体数据的异常，利用大数据分析的方法，推测患某种疾病的可能性，从而做到对很多疾病防患于未然的。在疾病的预防上，人们做的还远远不够，现在的医学的发展也更加重视得了病之后怎么治的问题，而对于很多疾病的早期跟踪和预防问题，显然做的还很不够。  </p><p>上文我们针对医疗领域看病贵的问题，分别谈了三个方面的因素，并且针对每个不同的因素，聊了一下在大数据和机器智能时代有哪些可以优化的措施。现在我们接着来谈下一个问题，也就是医疗资源分配不均衡的问题。  </p><p>我们经常说，互联网能够拉近人与人的距离，在地理位置上相隔几千公里的甚至无论多远的两个人，都可以通过互联网的方式将彼此联系起来，而在医疗资源之中，最重要的资源就是医生资源，我们是否可以通过互联网的手段将一些医术高超的医生和患者跨越地理位置的距离而将其联系起来呢？答案当然是肯定的。不过为了达到在线医疗的预期效果，我们需要建立一种标准格式的在线病历系统，患者保留对自己病历的所有权，并且通过患者自己的授权，这个病历能够被网上任何一个由他自己指定的医生查阅到，同时搭建一个患者与患者之间、医生与医生之间（会诊）、患者与医生之间的交流平台，并且能够根据患者借助于医疗设备做完检查之后，电子病历系统实时更新的变化，用大数据的方法，针对每个患者不同的病情，推荐与之最匹配的医生。这些是完全可以实现的，一旦这些工作落到实处了，那么医疗资源分配不均衡的情况，也可以在某种程度上得到有效的缓解。其实我们回过头来说，如果到了机器智能给人看病超过人类医生的那一天，医疗资源分配不均衡的情况就已经得到解决了，在那些医疗技术水平落后的地区，放一些机器就行了，机器能与人对话，并且随着将来可穿戴设备的普及，人体各项体征数据的采集基本上只要带一个可穿戴设备就行了。  </p><p>对于最后一个方面，很多疾病难以治愈的问题，其实我们可以通过换一种思维，即大数据的思维来解决疾病治疗的问题。拿癌症来说，癌症之所以难以治愈，主要原因是它与诸如感冒之类的疾病致病机理完全不一样，主要体现在以下三个方面：  </p><ul><li>癌症是由于人类自身的细胞在细胞复制的过程中产生基因错误而导致的，它不比感冒这种由于细菌感染所引起的疾病，对于后者，我们可以用青霉素等药物，破坏病毒细胞的细胞壁，杀死病毒细胞，从而可以得到有效的治愈。但是对于癌细胞而言，它来源于人体自身，是没有细胞壁的，所以不能通过这种方式来把癌细胞杀死。实际上，同一种癌症其背后的致病机理可能是由不同的基因错误引起的，所以有些抗癌药物对于有些患者有效，而对于另外一些患者无效，就是因为虽然是同一种癌症，其背后的基因错误是不一样的。很多时候，医生在给癌症患者进行药物治疗之前，需要进行基因比对，以确定这类药物是否对该患者有效，就是这个道理。  </li><li>癌症是由于自身细胞复制的过程中产生基因错误引起的，那么既然人体细胞在复制的过程中能够产生一次错误，自然更容易产生第二次错误（也就是说，坏了的东西其实更容易损坏），这就是我们可能听说过，以前有一位患者癌症治好了，但是突然在某一天复发之后，原来的药物不见效，很快就去世了。就是这个原因，第二次的基因错误和第一次不一样。</li><li>癌细胞既然是由于基因错误引起的，那么这种基因错误的癌细胞，它自身在复制的过程中，也更容易产生错误，也就是说，癌细胞变异进而引起其他癌症的风险很大。</li></ul><p>基于以上三个方面的原因，所以癌症这种疾病变得极难治愈。目前我所了解到的针对癌症治疗的科学进展，主要有两个：其一是所谓的“饿死癌细胞”，这个观点是清华大学的颜宁教授提出来的，其背后的机理是，在提供其他营养物质维持正常细胞代谢的同时，阻断葡萄糖运输特异，饿死癌细胞。至于这种阻断的方式是什么？目前好像还不知道，科学家正在研究中。不过这是一个方向。其二是换一种思维，即采用大数据的思维来解决癌症治疗的问题。下面我具体来谈谈这种方法。  </p><p>癌症是由于基因错误引起的，那么其实我们可以通过研制治疗这种基因错误的药物，来治疗癌症。但是，遗憾的是，目前已知的导致肿瘤的基因错误在万这个数量级上，已知的癌症在百这个数量级上，如果考虑所有可能的基因复制错误和各种癌症的组合，种类将是几百万到上千万种，对于人类来说，这个数字是非常庞大的，不过，与此相对应的，这个数字对于计算机而言，却是一个很小的数字，如果能够利用大数据技术，在这些几百万到上千万种组合中找到真正引起癌症的组合，并且针对这些组合研制相对应的治疗药物，那么治疗癌症的梦想就可以实现了。实际上，国际上有很多大公司都在做相应的努力，譬如 Google 旗下的 Calico，以及美国的 Grail 公司等。  </p><p>以上就是我对于医疗领域了解到的一些知识和自己的一些想法，希望分享给大家能够有所帮助。明天，我们来聊一聊智能时代背景下的教育问题。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在昨天的文章中我们详细说明了什么是机器智能，用数据驱动获取机器智能的方法，谈了机器智能的一个必要因素就是大数据，并且讲了大数据对于人类生活的预测指导作用，今天我们在此基础之上，主要来谈谈医疗的内容，基于一篇文章的篇幅所限，明天我们再来谈教育。  &lt;/p&gt;
&lt;p&gt;当今医疗领域所面对的问题主要有三个方面：第一，看病贵；第二，医疗资源分配不均衡，好的医疗设备和技术精湛的名医大都集中在经济比较发达的地区，经济不发达地区的人面临的不仅仅是看不起病的问题，同时还有生了重病找不到好的医生的问题；第三，很多疾病，譬如癌症，人类仍然没有找到可靠的能够使其得到稳定治愈的方法。其实针对这三个方面的问题，大数据和机器智能的发展都能够提供一个理论上行得通的解决方案。下面我们一一来谈。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.keeplearning.group/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="公众号" scheme="http://blog.keeplearning.group/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>说说人工智能、大数据、医疗和教育（一）</title>
    <link href="http://blog.keeplearning.group/2017/07/21/2017/07-21-ai-bigdata/"/>
    <id>http://blog.keeplearning.group/2017/07/21/2017/07-21-ai-bigdata/</id>
    <published>2017-07-21T02:50:00.000Z</published>
    <updated>2018-11-07T08:33:34.103Z</updated>
    
    <content type="html"><![CDATA[<p>什么是人工智能？维基百科上是这么说的：  </p><blockquote><p>人工智能（英语：Artificial Intelligence, AI）亦称机器智能，是指由人工制造出来的系统所表现出来的智能。通常人工智能是指通过普通电脑实现的智能。该词同时也指研究这样的智能系统是否能够实现，以及如何实现的科学领域。  </p></blockquote><p>简而言之，就是让人制造的机器具有从事智能活动的能力。实际上，在人工智能发展的早期阶段，科学家就是通过让机器模拟人脑产生智能的方式使其具备从事简单智能活动的能力，人的智能活动很多时候依赖于人类的意识，然而冷冰冰的机器是不能也不会产生意识的，所以实际上这种方法在后来就遇到了很多难以逾越的障碍，几乎没有做出什么突破性的成果。人类和机器之间一个重要的区别就是人类是有意识的，人类能够感知自我的存在和行为，而机器不行。很多媒体报道什么家用机器人跳水自杀之类的新闻显然是哗众取宠和危言耸听，再加上各种科幻电影的渲染，在一些不知所以然的群体中制造了莫名其妙又毫无必要的恐慌，担心机器哪天意识觉醒之后会成为人类的威胁，相比于担忧这些压根儿就不存在的事情，人类更应该考虑的是将来自己的工作机会被机器取代了该怎么办？关于这一点我会在后文提到。</p><p>言归正传，这种让机器模拟人脑产生智能的方式使其具有智能的方法，我们一般称之为传统的人工智能方法。实际上，现在人工智能领域所取得的一系列重大突破性成果，如语音识别、图像识别、机器翻译等，都是采用数据驱动而不是通过模拟人类产生智能的方式取得的。在怎么发展机器智能这条路上，人类大概挣扎了十多年的时间才找到了数据驱动发展机器智能的方法，这个过程就好比人类学会飞翔一样，最初通过模拟鸟类的飞翔给自己的双手绑上插了羽毛的翅膀，然后从高处一跃而下，当然结果可想而知了，后来空气动力学的发展让人类明白了可以利用其原理造出飞机，才真正实现了飞翔的梦想。飞机不需要像鸟儿一样有一双长满羽毛的翅膀才能飞起来，飞机有自己飞起来的方式，与此类似，机器产生智能的方式也不需要向人类一样，可以采用完全不同于人类思维的数据驱动的方式让机器具有智能。那么，什么是数据驱动的方式呢？</p><a id="more"></a><p>所谓数据驱动的方法，首先需要大量的具有代表性的数据，接着需要能够处理这些数据的超级运算能力，然后就是利用一些简单的数学模型组合在一起，去契合这些数据，以训练出模型的参数，这种训练模型参数的过程，就是现在很火的机器学习。从这里可以看到，数据驱动方法的成功，取决于两个必要的因素，一是大量的爆炸式的数据积累，二是超级运算能力。恰好互联网技术，特别是移动互联网的发展，导致数据量喷井式地爆发，产生了大量的可用于机器学习的数据，而摩尔定律（即集成电路的性能会每隔18个月翻一番）又为超级计算的出现准备了条件。数据量和运算能力都指数级增长，所以，在现在这个时代，人工智能领域才出现了很多突破性的进展，并且随着数据量的积累，将来在诸多领域难以解决的问题都可以转化为数据问题用机器智能的方法得到解决。在后文中我将会提到，癌症的治疗问题也可以是一个数据问题。  </p><p>人工智能的关键是利用大量的数据训练出模型的参数，这个过程称为机器学习。对于机器学习，我一直在找一个大多数人都能理解的方式来加以说明，我想我们可以把它看作是解非齐次线性方程组（即等号右边的常数部分不全为 0 的方程组）的逆向过程，先说明一下，对线性代数不熟悉的话可以跳过这部分，只需记住机器学习就是由已知的部分解集合找方程组的过程即可。所谓逆向过程，即已知一个有无穷多解的非齐次线性方程组的部分解集合，求满足这个解集合的非齐次线性方程组的系数矩阵的过程。在这里，解集合就是数据，一个非齐次线性方程组有无穷多解的话，要求其系数矩阵的秩等于增广矩阵的秩同时小于未知数的个数，这就是一个基本的简单模型，我们由这个基本的简单模型出发，一步步去拟合解集合中的数据，直到找到最终的方程组，对于这个最终的方程组来说，目前存在于解集合中的数据，全是它的解。这个过程就是机器学习。   </p><p>细心的人可能已经发现了，我这里所说的是部分解集合，而不是全部（实际上除了用基础解系的方式能够把全部解表示出来的话，没有其他方法能把解集合的全部都表示出来）。这是因为，在实际场景中，我们虽然可以得到大量的数据，但是，永远不可能得到完完全全的所有数据完备集，因为谁也不知道这个完备集的范围是多大，而我们最终训练出来的模型，跟数据量的大小是又很大关系的，数据量不足的情况下，我们的模型误差就会比较大。但是只要我们用以训练的数据量足够大，不断大，那么，我们最终训练出来的模型的精确度跟真实模型的误差就会越小，这不是随口乱说的，背后是有着严密的数学保障的，这个数学保障就是俄国数学家切比雪夫提出的切比雪夫大数定律，这个定律背后表达的思想是：当样本数足够多时，一个随机变量和它的期望值之间的误差可以任意小。那么由此看来，我们最终得到的非齐次线性方程组有以下两种情况：  </p><ul><li>与最真实的模型同解，甚至就是最终的模型，这是最理想的情况；</li><li>满足部分解集合的模型与最真实的模型只是有公共解，那个部分解集合里面的解就是公共解。</li></ul><p>对于第二种情况，是不是意味着工作都白做了，完全没用了呢？当然不是。下面的举个例子说明一下这种情形。  </p><p>我们天体运动的模型是开普勒和牛顿所确定的日心说椭圆形模型，开普勒提出了开普勒三定律，准确地描述了行星运动的规律，牛顿在这个基础上修正了椭圆的焦点，将其移动到了太阳系的重心。开普勒是怎样得到这个模型的呢？实际上，开普勒首先很幸运地观察到了行星运动的椭圆形轨迹，这相当于一个最初的简单模型，并且在此基础之上，用了大半辈子的时光，通过从他的老师那里继承到的和观察到的大量的数据，一步步将模型拟合起来，人工地完成了这个机器学习的过程。其实在此之前，最早提出日心说的是哥白尼，但是哥白尼的日心说模型很不准确，与实际的误差很大，原因是哥白尼是以圆为基础而不是以椭圆为基础建立模型的。早在哥白尼之前，托勒密以圆为基础的地心说模型准确的契合了一百多年以来行星运动的观察数据，这个模型是由 40 ~ 60 个相互嵌套的大小圆组成的，并且托勒密根据自己的模型绘制了一张表，准确地预测了将来的某个时候某个星球所在的位置。托勒密之所以把行星的轨迹看作是圆，是因为受到了毕达哥拉斯的影响，毕达哥拉斯认为，圆是这个世界上最美的图形，所以托勒密认为行星运动的轨迹应该是圆。在哥白尼的时代，他所提出的日心说模型还没有托勒密的地心说模型准确度高呢。托勒密的地心说模型准确地指导了欧洲人的农时1500年，1500年后，托勒密模型对太阳运动的累积误差才多出了 10 天。  </p><p>由上面的例子我们可以看到，其实在实际生活中，最接近真实情况的那个模型往往很难得到（开普勒是运气很好地恰好观察到了椭圆形轨迹），但是我们可以用一系列简单模型的组合来逼近那个最真实的模型（托勒密就是用圆），并且切比雪夫大数定律告诉我们，随着数据量越来越多，我们的简单模型会越来越接近最真实的情况，可以无限接近。实际上这也是我们现在机器学习研究机器智能的方法，大家都知道前段时间 3:0 战胜柯洁 Google 大脑，其背后也就是简单的人工神经网络在几万台服务器上的复杂实现。  </p><p>讲完了数据驱动的人工智能方法，还有一个问题就是，怎么判断机器具有了智能呢？其实这个方法很早很早就有人提出来了，这个人就是大名鼎鼎的阿兰图灵，这个方法被称之为图灵测试。图灵测试是这样子的：拿一块帘子挡住具有智能的机器和一个人，另一个人坐在帘子的对面，这个人和帘子的另一面交谈，如果这个人无法判断对面跟他交谈的是人还是机器的话，那么我们就说这个机器具有了智能。  </p><p>现在，我们已经知道了数据驱动人工智能的方法一个关键性的影响因素是数据量，数据必须要大，必须是 big data ，即大数据。通常来说，人们一看到名字，就知道大数据的其中一个特点，就是数据的体量必须要大，这个没什么可说的，上文中已经说了，这是很关键的。除此之外，大数据还有两个特点：多维度和完备性。什么叫做大数据的多维度呢？拿微信来说，当一个人发一条状态的时候，或者发出一条聊天消息的时候，微信的后台是能够知道这个人的年龄、性别、地域的，年龄、性别、地域和这条状态或记录联系在一起，就成为了一个多维度的数据，而不是最初的仅仅只是一条孤零零的状态或者消息。那么这些多维度的数据又有什么用呢？为什么要求大数据具有多维度呢？这是因为，多维度的数据可以利用数据的交叉性和强相关性的特点得出很多单单从一种角度得不到的信息。举个例子吧，譬如娱乐圈某某明星摊上大事了（出轨了之类的），我们可以在微信上通过大数据分析的方法得到一些对于这个事件的结论：某某年龄段的女生、男生对这个事件的态度啊，某个地域的人对这个事件的态度啊种种，一目了然，通常不同的年龄段的人对这种事情的态度是不一样的，我们通过大数据的方法可以分析出来，不同地域的人态度也可能不一样，譬如该明星所在地的人，可能对这个事件的态度与其他地方的人就不一样了。什么是大数据的完备性呢？就是数据要尽可能地覆盖面要广，这一点在以上也略作了分析，大量重复的数据是毫无意义的。  </p><p>其实，大数据和机器智能不仅仅可以用来做各种社会问题调查（譬如上文所说的对某明星摊上大事的态度），还有一个最重要的特点，也是人工智能领域非常重要的特点，就是预测！什么意思呢？举个例子吧。如果我们掌握了合肥市过去很多年每条道路的交通运行情况数据，我们就可以在过去这些数据的基础上，对每天每条道路的拥堵情况做出准确的预测，帮助人们合理地安排出行时间和选择出行道路，事实上，已经有很多公司在做这方面的研究了。想象一下可以互相通信自动驾驶汽车，它们对整个城市的道路情况了如指掌，可以帮助你选择合理地出行路径以节约大部分的时间。对于自动驾驶汽车的问题，我跟身边人聊起这些的时候，总有人说之前特斯拉出的那场事故，事实上，特斯拉的那场事故已经过去快两年了，依照人工智能的进化速度，自动驾驶早就已经不是当初那个量级了，人很容易犯的一个错误就是用过去的观点看待现在的问题。自动驾驶的应用，现在只剩下政策和保险的问题了。  </p><p>我们知道机器智能的发展依赖于大数据，实际上在大数据领域有两个不同的方向，一个是大数据工程，另一个是大数据分析，大数据工程做的工作是大数据的设计、部署、获取和维护，大数据分析则属于数据挖掘的内容，本质上来说就是机器学习，在大量的数据中提取有用的信息。说到这儿，其实有一个信息度量的问题，数据和信息是不一样的概念，数据量大并不意味着信息量大，譬如在大量重复的数据中，数据量是很大，但是信息量却是很少的，那么怎么样度量信息呢？我们生在了一个好的时代，早就有人替我们解决了信息度量的问题了，这个人是谁呢？也是一个大名鼎鼎的人物 —— 克劳德香农博士。一个杂乱无章的系统是充满很多不确定性的，怎么样消除这些不确定性呢？就是引入信息。香农博士在概率论的基础之上发展了信息论，引入了信息熵的概念，引入的信息量越大，不确定性越小，香农博士的信息论是现代数字通信技术的基础，通信领域的最高奖叫做香农奖，就是以香农博士的名字命名的。如果你对信息论有兴趣，可以看看吴军老师的《数学之美》这本书。  </p><p>大数据和机器智能的发展，在未来所涉及到的影响面会非常之广，在这一点明天的文章再来谈吧。明天的文章会写一下我自己对于未来世界的思考，主要集中在医疗和教育方面。大数据和机器智能的发展可以让很多疾病的发现变得可以预测，特别是癌症，很多癌症在早期是很难检测出来的，但是我们可以用大数据的方法提前发现和预防，另外，就是以后的教育，智能社会机器会剥夺人很多的从事技能劳动的机会，现在的技能教育以后会有什么变化？以后的教育是什么样子的？对于医疗来说，为什么看病这么贵？有哪些方法可以降低医疗成本，我们明天的文章再来谈。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是人工智能？维基百科上是这么说的：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人工智能（英语：Artificial Intelligence, AI）亦称机器智能，是指由人工制造出来的系统所表现出来的智能。通常人工智能是指通过普通电脑实现的智能。该词同时也指研究这样的智能系统是否能够实现，以及如何实现的科学领域。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，就是让人制造的机器具有从事智能活动的能力。实际上，在人工智能发展的早期阶段，科学家就是通过让机器模拟人脑产生智能的方式使其具备从事简单智能活动的能力，人的智能活动很多时候依赖于人类的意识，然而冷冰冰的机器是不能也不会产生意识的，所以实际上这种方法在后来就遇到了很多难以逾越的障碍，几乎没有做出什么突破性的成果。人类和机器之间一个重要的区别就是人类是有意识的，人类能够感知自我的存在和行为，而机器不行。很多媒体报道什么家用机器人跳水自杀之类的新闻显然是哗众取宠和危言耸听，再加上各种科幻电影的渲染，在一些不知所以然的群体中制造了莫名其妙又毫无必要的恐慌，担心机器哪天意识觉醒之后会成为人类的威胁，相比于担忧这些压根儿就不存在的事情，人类更应该考虑的是将来自己的工作机会被机器取代了该怎么办？关于这一点我会在后文提到。&lt;/p&gt;
&lt;p&gt;言归正传，这种让机器模拟人脑产生智能的方式使其具有智能的方法，我们一般称之为传统的人工智能方法。实际上，现在人工智能领域所取得的一系列重大突破性成果，如语音识别、图像识别、机器翻译等，都是采用数据驱动而不是通过模拟人类产生智能的方式取得的。在怎么发展机器智能这条路上，人类大概挣扎了十多年的时间才找到了数据驱动发展机器智能的方法，这个过程就好比人类学会飞翔一样，最初通过模拟鸟类的飞翔给自己的双手绑上插了羽毛的翅膀，然后从高处一跃而下，当然结果可想而知了，后来空气动力学的发展让人类明白了可以利用其原理造出飞机，才真正实现了飞翔的梦想。飞机不需要像鸟儿一样有一双长满羽毛的翅膀才能飞起来，飞机有自己飞起来的方式，与此类似，机器产生智能的方式也不需要向人类一样，可以采用完全不同于人类思维的数据驱动的方式让机器具有智能。那么，什么是数据驱动的方式呢？&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.keeplearning.group/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="公众号" scheme="http://blog.keeplearning.group/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>谈谈《我的前半生》—— 顺便聊聊我的爱情观</title>
    <link href="http://blog.keeplearning.group/2017/07/18/2017/07-18-half-life/"/>
    <id>http://blog.keeplearning.group/2017/07/18/2017/07-18-half-life/</id>
    <published>2017-07-18T02:50:00.000Z</published>
    <updated>2018-11-07T08:37:44.324Z</updated>
    
    <content type="html"><![CDATA[<p>出来混总是要还的，欠下的文章总还是要写的。一直想写一篇关于《我的前半生》这部电视剧的文章，无奈事情太多，所以拖到了今天。这部剧我没有全部看完，很多地方都是快进或者跳着看的（实在太忙），不过在现在这个时代，就算是跳着看、快进看的也能八九不离十地了解一部电视剧的剧情，这也大概就是我们这个时代各种五花八门的网络剧神奇的地方吧（偷笑中）。想到可以就着这个剧蹭蹭热点，聊聊自己的爱情观，以借此说明一下自己虽在一所男女比例10：1的恐怖学校里待了那么多年，但肯定真的不是基佬并且到现在还没有被掰弯这个事实，不禁会心一笑：嗯，就写它了。  </p><a id="more"></a><p>在这之前我也曾屡次表达过我对追求爱情的看法，主要有以下几点吧： </p><ul><li><p>选择大于努力。你必须要选择一个懂得欣赏你的人，有些人即便你再喜欢，那也不是你的菜，不要觉得自己多么努力地奉献爱心多么暖男那对方就一定会和自己在一起，这么想那就太天真了。第一，这个世界上总是好人比坏人多的，我始终相信这一点，所以，其实对方去选择一个好人的话选择的余地还是蛮大的，不一定会是你，当然我这么说不是讲你不需要成为一个好人，相反你还必须是一个好人，不过要成为一个有魅力的好人，这就不简单了；第二，就生活中而言，那些曾经主动帮助过你的人，总比那些你帮助过的人，更愿意帮助你，世人喜欢雪中送炭的很少，不过都爱锦上添花，同样的道理，一个欣赏你的人，比那些仅仅只是你单方面欣赏的人，更容易跟你在一起，也更容易懂你。选择一个你很欣赏很在乎但是却不怎么在意你的人，可能你再怎么努力对人好，都不见得有什么好的效果，这一点需要明确。我觉得无论男生还是女生，都是如此吧。所以放弃不切实际的幻想还是挺重要的。而且选择一个什么样的人跟自己在一起，直接决定了你以后的生活会是什么样子的，所以，选择还需要慎重。</p></li><li><p>选一个聪明人很重要。这不是我的观点，而是吴军博士的，吴军博士说，这个世界上聪明会欣赏聪明人，而且只有聪明人会欣赏聪明人，这是一个相当有智慧的人告诉他的，他观察周围的人二十余年，证明这句话是对的。对于这个观点，我是非常认同的，不过，我认为，吴军博士这里说的聪明不是指的我们通常意义上的智商高，而是有智慧。什么是智慧？马云说世界上聪明的人很多，但是智慧的人很少，那么什么是智慧呢？就是知道不要什么？举个简单的例子，如果问大多数人，你们究竟要哪些东西？我相信大多数都是能说出来的，嗯，不错，都是聪明人，但是如果问大家，你们究竟不要哪些东西呢？我相信很多很多人，一时真不一定能说出个一二三四来。知道自己不要什么，这也是智慧的一种。如果认为自己是一个智慧的人的话，那就选择一个智慧的人吧，因为只有智慧的人之间才了解彼此才懂得彼此欣赏。</p></li><li><p>选一个『真正的家人』跟自己在一起。至于什么是真正的家人？我在我的另一篇文章《和久浩介该不该跑路》里说了，所以这里就不再赘述。</p></li><li><p>要学会跟自己相处。自己跟自己处出快乐，才能带给别人快乐。试想，一个人如果自己跟自己待在一起都觉得无聊的话，能被谁喜欢上呢？谁会去喜欢一个生活很无趣的人呢？生活才是人生的主题，一个人工作和学习无论多忙，但是千万别忘了你要会生活，有趣的生活才能给人带来幸福的人生。就我自己而言，我平时非常喜欢摄影，几乎到哪都想找个创意咔咔咔几张的那种，不过很少拍人或自拍，更多的是拍景，男生老闲着没事自拍总觉得这人是不是有问题，还有就是景比人更能拍出意境，我觉得。虽然我的摄影技术有很大的进步空间（偷笑中），不过我乐此不疲，这也确实给我带来了很多快乐；我还喜欢K歌，我自我感觉我歌唱得还挺好（熟悉我的可以轻喷），自己一个人或者喊上几个朋友去 KTV 嗨上几首歌也是很愉快的事情；我喜欢漫跑，就喜欢一段长跑之后那种酣畅淋漓和浑身酸爽的感觉，这里顺带说一句和主题无关的话，熟悉我的人可能觉得我挺瘦的，这其实有两个原因，第一是在我们学校读书真的很累（实话实说）；第二个原因就是我们的食堂，我一直觉得我们的食堂是这样子的食堂：西区的不好吃，东区的太难吃，横批：猪都懒得吃。还有一个爱好就是阅读，凡是感兴趣的都想拿出来读一读，最近看亚马逊打折，买了八册的《莎士比亚全集》。熟悉我的人都知道，我的周末一般是什么学习都不干的，要么去打球，要么好好陪家人和朋友吹吹牛谈谈心，其实我挺能说的，一个人可以在那里滔滔不绝讲个把小时的那种，要么静下心来看看书（非技术类）。主要的学习业务，我其实都在工作日干，而且一心一意做，手机开勿扰模式开好久的那种，我发现我这么做了之后，效率反而提上去不少，周末不干活，也没出什么了不起的后果，因为自己已经下定决心周末什么也不做了，平时反而把很多事情都处理得比较好了。  </p></li></ul><p>除了以上四点之外，针对《我的前半生》里的故事，我还想说的是，另外一点也非常非常重要，我们还应该懂得怎么给予爱。  </p><p>故事的一开始，主人公罗子君以一种尖酸刻薄、疑神疑鬼的阔太形象出现，实话说，第一次看到这样子的女子确实让人很讨厌。但是凡事必有因，一个如此形象的人出现在面前，背后肯定有其形成的原因。不少人把这个原因归咎为罗子君自己，我认为对，她自己指定是有责任的，后来看到她妈妈和妹妹的形象之后，更加肯定了这一点，她自身以及家庭的原因的确影响很大。但是，我还想说的是，一段婚姻的失败，出现了问题，肯定是婚姻夫妻双方都有责任，对于那个男的来说，除了出轨之外（出轨当然是应该义正言辞谴责并且十恶不赦的），他难道就没有其他的问题了吗？他的妻子变成了如此一副讨人厌的模样，他自己就没有责任么？他是怎么爱他老婆的？而后爱坏了之后又是怎样把她一脚踢开的？这难道不是问题吗？  </p><p>我一直觉得，两个人在一起，是为了让彼此成为最好的彼此，就是说，咦，认识你之前我都没有发现，我居然有能力做好这么多的事情，原来我的生活还可以这么积极向上有幸福感呀。这，才对了。</p><p>从这一点上来看，罗子君那个老公责任大了去了，他首先是不会爱人，他爱的方式有问题呀，让老婆一个人闷在家里，一年到头出差，陪伴家人的时间少之又少，后来他们打官司的时候出示的证据表明，这个男人常年到头是不在家的，跟自己的老婆极少有精神世界的交流，除了物质上，精神上的给予极其匮乏。连个基本的陪伴都给予不了，只是觉得我挣好钱就行了，这是爱么？最后精神交流都出了问题，反而不知自我反省，还出轨了，爱上了别的女人。他是把一个人爱坏了之后，粗暴地又把这个人踢了出去。</p><p>我一直觉得，感情关系，首先是不能随便选择，与此相对应的，既然选择了，也不能轻易放弃呀。什么是爱？爱就是哪一天我发现对方不好了，我首先想到的是我自己肯定是有责任的，我们在一起生活彼此影响，也许是我忽略了你的生活和你的成长，但是我可以有耐心陪着你慢慢变好呀（当然实在变不好就没办了），爱人之间需要陪伴，无论多么忙碌，生活的平衡感很重要，如果没有了生活的平衡感，缺少了陪伴，家人便会很难感到幸福，如果家里人都不幸福，自己奋斗的目的又是在哪里呢？什么是责任感和安全感？那就是虽然在外面有诱惑，虽然跟外面的诱惑比起来你显得没那么好，但是，请放心，即便你没那么好，我也有足够的耐心陪着你慢慢地变好，这才是责任心和安全感呀。这不是对男生一方说的，我觉得这一条对男生和女生都适用。反正我就是这样子的人，在我心里，纵然再有诱惑，我和你这么多年的感情永远是第一位的。  </p><p>那么怎么爱呢？我有时候听身边的女生说，我喜欢吃香蕉，你却给我一车苹果，你还觉得自己应该让我很感动？这不是有问题吗？不少人还觉得这句话很有道理。我觉得这是一个非常危险的想法。为什么呢？挑食对身体不好，真的，亲。苹果也是对身体很好的呀。如果说对苹果过敏，那过敏至少也是一种病吧？那么我的看法是什么呢？我觉得，你喜欢香蕉，对身体好，没关系，我肯定会给你，但是，我同样会给你苹果，而且会想办法让你接受苹果跟接受香蕉一样开心。当然有的人就是没有成长的心态，就是只爱香蕉不爱苹果，那说明你找的人有问题，你的选择出问题了。</p><p>不少女生希望被自己的男朋友或者老公宠爱着，但是聪明的人一定要想到这一点，如果哪一天你真被她宠坏了，可能被抛弃的也是你。看看罗子君，这不就是一个鲜活的例子么？所以，什么是负责任的爱情呢？就是共同成长，彼此包容，爱你的人不仅仅只是包容你，还要带你一起成长的，让你感受到进步的快乐，让你活得更幸福。这种爱才是负责任的爱，这才是懂得怎么给予爱。  </p><p>其实我对相亲还有一点看法。我个人认为并不是所有的人都适合走相亲这条路的。原因是什么呢？我们可以首先来看一下相亲看什么？第一，长相，肯定要帅或者要漂亮，在相亲的时候，长相是非常重要的，长相不是属于特别帅或者特别漂亮的那种，可能一下就给 pass 掉了，这是实话，当然了，肯把实话说出来的人不多；第二，看品质，怎么看呢？其实只要你不是那种一看就特别不靠谱的人，仅仅只是靠见一面说两句话，这个东西真看不出什么来，可以讲从这个方面来说，大多数人都一样；第三，看能力，怎么看呢？通过标签来看，相亲的时候要看能力的话，只能看标签，譬如你是某某重点大学毕业的呀，学历高呀，收入好呀，各种。所以，如果是以上三个方面都很好的人，无论男生女生，都可以通过相亲来认识未来的伴侣，但是，我相信上面三个条件都很好的话，大多数应该不缺男朋友或者女朋友吧。如果上述三点都不好的话，特别是第一点，那我劝你为了避免以后的麻烦，还是趁早在身边找一个日久生情靠谱的吧，相亲这条路不适合你，倒腾来倒腾去只能是瞎费功夫。很多东西，怎么权衡，看重什么，其实很重要，不可能十全十美，你得看重那些对你而言最重要的东西。  </p><p>最后，祝大家都能找到理想的伴侣吧。  </p><hr><p>另外，打个小广告，请大家帮个忙把这篇文章转发到朋友圈一下，我在这个公众号的开篇第一号的文章《我为什么写公众号》中就表达过，写这个公众号的目的，就是为了一起认识世界，探索世界，并且有志于找一些志同道合的朋友加入进来。我在研究大数据医疗相关的一些东西，并且有志于做一些这方面相关的事情，但是医疗知识匮乏，急需认识一些对医疗体系和医学有深刻了解的朋友，如果认识医疗行业相关的朋友的话，或者你自己就是这方面的人才的话，欢迎通过此公众号与我联系，没准将来可以一起干一票（^_^）：  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出来混总是要还的，欠下的文章总还是要写的。一直想写一篇关于《我的前半生》这部电视剧的文章，无奈事情太多，所以拖到了今天。这部剧我没有全部看完，很多地方都是快进或者跳着看的（实在太忙），不过在现在这个时代，就算是跳着看、快进看的也能八九不离十地了解一部电视剧的剧情，这也大概就是我们这个时代各种五花八门的网络剧神奇的地方吧（偷笑中）。想到可以就着这个剧蹭蹭热点，聊聊自己的爱情观，以借此说明一下自己虽在一所男女比例10：1的恐怖学校里待了那么多年，但肯定真的不是基佬并且到现在还没有被掰弯这个事实，不禁会心一笑：嗯，就写它了。  &lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.keeplearning.group/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="公众号" scheme="http://blog.keeplearning.group/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>和久浩介该不该跑路</title>
    <link href="http://blog.keeplearning.group/2017/04/17/2017/04-15-hejiuhaojie/"/>
    <id>http://blog.keeplearning.group/2017/04/17/2017/04-15-hejiuhaojie/</id>
    <published>2017-04-17T01:10:00.000Z</published>
    <updated>2018-11-07T07:10:30.578Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/mw690/79225320gy1feplqy4ujuj20c80c874u.jpg" alt=""></p><p>前两天读完了东野奎吾的《解忧杂货店》，其中在这本书里讲述的一个故事一直萦绕在我的心头，很多思绪在脑海中翻腾，如鲠在喉，为了讲清楚我接下来围绕这个故事表述的想法，先介绍一下这个故事的大体情节。</p><a id="more"></a><h2 id="故事梗概"><a href="#故事梗概" class="headerlink" title="故事梗概"></a>故事梗概</h2><hr><p>和久浩介小时候生活在一个富裕的家庭里，父亲和久贞幸是一个生意人，浩介有一个读高中的堂哥，名字叫哲雄，痴迷披头士乐队，在骑机车时发生车祸意外身亡了，哲雄的父母认为自己的孩子就是因为听了披头士的那些音乐，才结交了坏朋友，最终导致车祸身亡的，他们要把哲雄珍藏的唱片全部丢掉。浩介那时候快上中学了，对音乐产生了兴趣，想把那些披头士的唱片都接收下来，其他亲戚劝告浩介的父母不要接收那些唱片，但是浩介的父母并没有理会这些建议，他父亲说：“听流行音乐未必就会学坏，而且，哲雄并没有学坏。只要是活泼一点的高中生都会骑机车。”不仅如此，贞幸夫妇还给孩子购买了最新型的音响设备。殷实的家境给了一家人其乐融融的奢侈生活，自己的生活永远充满着蓝天和阳光，浩介对此深信不疑。直到后来的某一天，浩介发现家里的生活悄无声息地发生了可怕的变化，以前很舍得在自己身上投入金钱的父母，忽然变得抠门起来，并且父母经常为“钱”争吵。从一系列的事件中，他隐约觉得应该是父亲生意失败了，欠了巨额债务，根本没有重新站起来的可能，不止于此，令他万万没有想到的是，父母居然想到了搬家跑路，父亲贞幸在他心目中的高大形象彻底崩塌了。几乎就在同一时候，一直给他带来精神力量的披头士乐队解散了。浩介的心情低落到了极点，他不知道自己该怎么办，到底该不该跟随父母一起跑路？他拿起笔写了一封信给浪矢杂货店的浪矢爷爷诉说了自己的烦恼。浪矢杂货店在最后回复的一封信中写下了下面的内容，这封信我读了很多遍，感触很深，在这里摘抄给大家：</p><blockquote><p>我非常了解你的心情。</p><p>在目前的情况下，你的确很难对父母产生信任，会讨厌他们也很正常。</p><p>但是，我无法对你说，“干脆抛弃这种父母，走向你认为正确的路”。</p><p>在家人的问题上，我认为除非某个家人去追求更好的发展，否则，全家人应该尽可能团结在一起，如果因为讨厌或是无法信赖等原因各奔东西，就不是真正的家人。</p><p>你在信中提到“很讨厌父母现在的样子”，我对“现在的样子”这几个字抱着希望，也就是说，你以前曾经喜欢父母，今后的发展也可能让你对父母改观。</p><p>既然这样，你只有一条路。</p><p>跑路不是正确的行为，如果可以，很希望你的父母能够改变心意，但如果无法改变，我认为你应该跟着父母走。</p><p>我相信你的父母有他们的考虑，他们应该知道，即使逃走，也无法解决任何问题，可能只是暂时躲起来，日后在适当的时机逐渐解决问题。</p><p>也许需要一点时间才能解决所有的问题，也许会经历很多苦难，但是，正因为这样，一家人更必须在一起。虽然你父亲在你面前可能没说什么，相信他也做好了充分的心理准备，唯一的目的，就是为了保护家人，你和你母亲必须支持你父亲。</p><p>最不幸的是一家人因为跑路这件事而丧失了向心力，那可就赔了夫人又折兵。虽然跑路绝对不是正确的选择，但只要全家人在一条船上，就有可能一起回到正轨上。</p></blockquote><p>读完信后，浩介决定听从浪矢爷爷的话，既然无法改变，就只有跟随父母跑路，虽然在他的内心中还是充满了对父母的鄙夷。对于这次跑路，和久贞幸对儿子是这么说的：“别担心，虽然我现在没办法明确告诉你时间表，但一定会恢复之前的生活，我可以向你保证。对我来说，家人最重要。为了保护家人，我可以做任何事，也可以奉献自己的生命。所以才要跑路。”妈妈纪美子也对他说：“不光是妈妈，爸爸也把你放在第一位，只要能够让你幸福，我们可以付出任何代价，即使奉献生命也不足惜。”</p><p>浩介想弄清楚披头士解散的原因，所以在全家跑路的那天去看了一场讲述披头士解散的电影，他从同学口中得知在这部电影里可以找到披头士解散的真正原因。但是在看完了这部电影后浩介不仅没有了解到真正的原因，而且还感觉自己遭到了背叛，在电影里他感觉披头士成员的心已经不在一起了，所做的一切就像是在敷衍，他不知道他一直以来的精神偶像怎么变成了这个样子。浩介失望透顶，回家后把许多年以来珍藏的披头士的唱片一股脑儿以很低的价格卖给了那位推荐他去看这部电影的同学。父亲贞幸对此感到非常生气，觉得浩介不当家不知柴米油盐贵，那么贵价格买回来的东西居然以这么低贱的价格糟蹋掉。对于金钱的斤斤计较让父亲的高大形象再次在浩介心中崩塌，他对他的生活对他身边的一切都觉得失望。</p><p>浩介觉得自己和父母的心既然已经不在一起了，并且无法修复，即使生活在一起，也没有意义，这是他从披头士的电影里得到的道理。所以，晚上在全家人一起跑路的路上，浩介溜掉了，彻底离开了让他厌恶的父母。他想，父母由于跑路的原因，一定不会报案，肯定会按照原来的计划找到新的地方并安顿好之后，再开始找自己。再后来，浩介经过一些列的过程流落到了孤儿院，化名藤川博，在这期间，警察局也没有收到任何家庭丢失孩子的报案与这个叫藤川博的孩子疑似。就这样，浩介长大了，并且由于对木雕的浓厚兴趣，跟随一个木雕师学徒，渐渐能独当一面后，他内心越来越有成就感。他越来越觉得跑路那天晚上离开父母是非常正确的决定，如果听从了浪矢爷爷的意见，真不知道自己现在会变成什么样子。在偶然间看到浪矢杂货店限时复活的公告后，由于对浪矢杂货店的特殊情结，他决定回到曾今浪矢杂货店的所在地写一封对于当年事件的回信，又由于对披头士的特殊情结，他走进了当地一家披头士主题酒馆，在这个酒馆里他写下了给浪矢杂货店的回信，信中说到，当初没有听从浪矢爷爷的建议，离开了父母，做了正确的决定，得到了幸福，在金钱和精神方面都很安定，人生必须依靠自己的双手开拓。他对当初离开父母的做法感到非常满意。</p><p>酒馆里播放着披头士的曲子，浩介在征求酒馆女老板的同意下翻看了几张黑胶唱片，猛然间发现了一些熟悉的痕迹，这唱片竟是自己当年卖给同学的那张，向酒馆女老板那儿打听这些唱片来历的时候，发现那个女老板是当年那个同学的妹妹，那个同学因为得了肺癌去世了。酒馆女老板说，大部分唱片是他哥哥的同学卖给他哥哥的，他哥哥的那位同学全家跑路了，但最后似乎没有逃成功，一家人半夜偷了一艘小船去海上自杀了，他父亲没有死，回到陆地上上吊了，并且留下了一封遗书，遗书里面说他太太和儿子也死了。</p><p>此时，浩介思绪一片混乱，根本无法保持平静，他一直觉得父母应该会按照原计划继续跑路，竟想不到会是这种结局。他父母用这种方式伪装成同时杀了儿子，他们可能想到了浩介会舍弃和久浩介这个名字和经历，身为父母的自己，就不能妨碍他。父母从这个世界上带走了一个叫和久浩介的人，成全了一个叫“藤川博”的孩子的人生。跑路前父母对他说的那些话不是欺骗他的，正是由于父母的成全，才有了自己现在的生活。后悔和自责涌上心头，由于自己的逃走，把双亲逼上了绝路，他们没有了其他的选择。浩介翻过刚才写给浪矢杂货店的回信，撕得粉碎。重新写了一封回信投递到浪矢杂货店，回来之后，浩介看到酒馆女老板正在放一部电影，这部电影正是当年他看的关于披头士的那部，但是影像中与浩介的记忆却不太相同，当年他觉得披头士已经人心涣散，现在的感觉却不同了，原文中是这么描述的：</p><blockquote><p>披头士的四名成员很努力地演奏，似乎乐在其中。虽然即将解散，四个人在演奏时，仍然回到往日的那份情怀吗？</p><p>当初在电影院看这部电影时，之所以觉得很糟糕，也许和浩介自己的心情有关。那时候，他无法相信心灵的团结。</p></blockquote><p>具体的很多细节大家如果感兴趣可以读读《解忧杂货店》这本书，这无疑是一个彻彻底底的悲情故事。我们不禁在想，如果和久浩介当初跟随父母一起跑路了，会不会有一个幸福一点的结局呢？到底什么是一家人？一家人在面对猝不及防的苦难的时候该怎么办？这个悲情的故事又能给我们的人生带来哪些思考呢？</p><h2 id="假如跑路了"><a href="#假如跑路了" class="headerlink" title="假如跑路了"></a>假如跑路了</h2><hr><p>假如和久浩介那晚没有离开，而是跟随父母一起跑路了，结果会如何？我们不妨大胆揣测一下。为了在很大概率上能说清楚这一点，先推测一下他父亲是一个怎样的人？这样子的人为什么要选择跑路？以及我们应该怎样看待这件事情，最后再来设想一下浩介跟随父母了最坏的结果会怎样？</p><h3 id="他父亲是个怎样的人"><a href="#他父亲是个怎样的人" class="headerlink" title="他父亲是个怎样的人"></a>他父亲是个怎样的人</h3><p>在描绘和久贞幸这个人物时原书中写了这样子的事情：</p><blockquote><p>天气好的时候，全家人经常在庭院里烤肉，通常父亲公司的员工也会一起参加。</p><p>“以前，日本在世界这家公司内只是普通员工，”父亲贞幸经常在下属面前高谈阔论，“但是，以后就不一样了，日本人必须成为领导者。因此，我们必须了解世界。外国是生意上的敌人，但同时也是生意上的朋友，千万不能忘记这点。”</p></blockquote><p>由此可见和久贞幸是一个非常有眼光并且很有野心的商人，从以上的故事梗概中我们也能看出他也是一个很开明的家长。在跑路之前贞幸对儿子说：“对我来说，家人最重要。为了保护家人，我可以做任何事，也可以奉献自己的生命。”这样子的人不能不说是一个很有家庭责任感的人，他把自己的家庭，尤其是自己的孩子，看得比自己的生命还重要。</p><h3 id="为何选择跑路"><a href="#为何选择跑路" class="headerlink" title="为何选择跑路"></a>为何选择跑路</h3><p>可就是这样子的一个人，面对生意失败、欠下巨额债务的困境，为何还会选择跑路呢？当然，很多局外人都知道，跑路绝对不是正确的选择，而是一种很不负责任的行为，并且估计也很难带来什么好的结果。对于这一点在原书中浪矢爷爷也说了：</p><blockquote><p>我认识几个跑路的人，虽然不知道他们目前的下落，但我猜想他们过得并不幸福。即使可以暂时比较轻松，债权人都会一直追他们。</p></blockquote><p>贞幸是一个很精明并且之前事业很成功的商人，而且，对家人非常有责任心，他很难看不到这一点，即便看不到，我认为他过一段时间也会想明白。我觉得贞幸之所以选择跑路，很大可能上是浪矢爷爷推测的那样子，可能只是暂时躲起来，避免对家人孩子更严重的伤害，日后在适当的时机逐渐解决问题。</p><h3 id="怎么看待这件事情"><a href="#怎么看待这件事情" class="headerlink" title="怎么看待这件事情"></a>怎么看待这件事情</h3><p>人生祸福本就很难预料，最后造成的这种结果贞幸可能压根就没预想到，今天的生活也许很富足，但谁也不知道明天会发生什么。以前看过一个故事，出处现在不太记得了。这个故事说的是有个人每天都在想着自己面对敌人的严刑拷打是怎样英勇就义的，他对此毫不怀疑，他觉得自己绝不是一个面对敌人的屠刀轻易屈服的人，可是有一天晚上做了一个梦让他彻底改变了对自己的看法，在梦里他真的被敌人抓住了，可是他手里拿着刀无论如何都自刎不下去，在梦里他一次次下决心抹自己的脖子，抹了无数次可就是抹不下去，直到他泪流满面地醒来。一个人真的很了解自己吗？未必！有些事情不是严重到一定地步恶劣到一定地步，你还真不知道自己会做出什么样子的事情出来。没深夜痛哭过的人，不足以谈论人生，同样，没深夜痛哭过的人，也不会了解那种苦有多苦。有的甚至苦到扭曲人性的地步。《品格之路》里说：人性这根曲木，很难造出什么笔直的东西。拿和久贞幸这件事情来说，也许就是在一个极端的环境下做出的无奈之举。从他对浩介的承诺来看：“别担心，虽然我现在没办法明确告诉你时间表，但一定会恢复之前的生活，我可以向你保证。“他并不是不想承担责任，只是暂时采取权宜之计保护自己的家人。</p><p>还有一个必须要回答的问题，假如他们没有选择跑路，留下来了呢？会如何？我觉得对于这些巨额债务依然是无可奈何，顶多只是给债主一些心理安慰而已：这个人虽然还不了这些钱，但是他没跑。如果留下来能够解决问题他就不会跑路了嘛，当然了，对一个人来说，自己造成的后果主动承担责任非常重要，所以跑路这件事本身来说还是错的。虽然可能在贞幸看来暂时逃避这个环境可以给家人带来轻松一点的生活，在这个环境下自己也更好集中精神想到解决问题的办法，可现实未必就会如此。</p><h3 id="跟随父母了会怎样"><a href="#跟随父母了会怎样" class="headerlink" title="跟随父母了会怎样"></a>跟随父母了会怎样</h3><p>浩介的逃走无疑给了贞幸夫妇沉重的打击，他们最后选择通过结束自己的生命来保护自己的孩子。贞幸爱自己的家庭和孩子，哪怕让他付出自己的生命也在所不惜，最后他也确实是这么做的。我们不妨换个思维来想一下这个问题，既然贞幸肯为了孩子结束自己的生命，那么，他是不是也肯为了孩子保全自己的生命呢？我想答案是肯定的。只要浩介在身边，无论多么艰难的时候，这也是他活下去的力量，只要支持他生活下去的力量还在身边，也许原本做得不怎么好的一些事情，他反而会做更好一些了。浩介如果跟随自己父母跑路了，最坏的结果是什么呢？债台高筑，依然还不起债务了？还被债主追？再加上跑路的罪名？最坏的情况下，爱他甚于爱自己生命的父母，在最不得已的时候，依然会为了保护孩子而舍弃掉自己的生命，就像现在这样子。然而这样一来，至少在这期间，还有通过努力让情况变好的可能，只要一家人在一起，就有希望，浩介的出走无疑把这最后的希望也活生生带走了。</p><h2 id="浪矢爷爷的信"><a href="#浪矢爷爷的信" class="headerlink" title="浪矢爷爷的信"></a>浪矢爷爷的信</h2><hr><p>浪矢爷爷的信我反复读了好几遍，摘抄在这儿，说明我是深表认同的，浪矢爷爷说：“在家人的问题上，我认为除非某个家人去追求更好的发展，否则，全家人应该尽可能团结在一起，如果因为讨厌或是无法信赖等原因各奔东西，就不是真正的家人。”一家人切不可在困难的时候失去向心力，只要全家人在一条船上，就有可能重新回到正轨上。我想这也是东野奎吾先生借由浪矢爷爷告诉我们的道理。</p><p>接下来一个问题是，既然一家人应该如此，那么我们该怎么选择我们的配偶呢？因为家庭就是婚姻的结合诞生的，所以这里的道理也显然对我们怎么选择自己的配偶具有很大的参考价值。</p><h2 id="我的恋爱观和婚姻观"><a href="#我的恋爱观和婚姻观" class="headerlink" title="我的恋爱观和婚姻观"></a>我的恋爱观和婚姻观</h2><hr><p>不以结婚为目的的恋爱都是耍流氓，所以我的恋爱观和婚姻观是一体的。找一个什么样子的对象？前段时间在“得到”app里看了吴军老师的一场直播，吴老师说，首先一定要找一个聪明的人，因为聪明人会欣赏聪明人，而且只有聪明人才会欣赏聪明人，吴老师认为，追一个不聪明但漂亮的女生和追一个聪明又漂亮的女生，后者还有点机会，前者是一点机会都没有，因为前者不懂得欣赏嘛！吴老师的观点我深表认同。就是这么回事嘛！当然我觉得吴老师这里说的聪明不是指通常意义上的智商高，而指的是智慧。选对象这件事情依然是选择大于努力的，选择很重要，我经常看到身边不少朋友追求一个女生的时候几乎拼尽了全力，哎哟那个心酸哟，可人家就是不搭理他，有啥用呢？你得选一个懂得欣赏你的人才行，否则无论多么努力都可能是白瞎的，因为人家根本不在乎嘛！懂得欣赏你的人你才有机会。与此同时你还应该看到一点，做一匹千里马难，但是做伯乐也不见得就那么容易。所以，千万不要随随便便选个人就喜欢上了，千里马也是需要遇到伯乐才能发挥价值的，而选择一个什么样子的人跟自己在一起直接关系到你以后的生活会是怎样的，所以这个非常重要，马虎不得，更不能操之过急。千里马和伯乐之间是一个双向选择的过程。</p><p>选一个怎样的对象呢？除了聪明之外，我还想补充一点，从这里也可以看到，应该选一个“真正的家人”跟自己在一起，并且自己对对方的感情也应该是“真正的家人”。什么是真正的家人呢？小说里面浪矢爷爷说的很清楚：“在家人的问题上，我认为除非某个家人去追求更好的发展，否则，全家人应该尽可能团结在一起，如果因为讨厌或是无法信赖等原因各奔东西，就不是真正的家人。”对，就是这样子。乍一看来好像这句话有点捆绑人的味道，但是我说的不是这个意思。我只是说，除非遇到一个真正你愿意不离不弃，忠于他／她的人品，相信他／她的未来，并且将来无论遇到怎样的困难，产生哪样的误会，虽然有脾气有性格，都会坚定地站在他／她身边的人，你想明白这一点，再去选择，否则，不要轻易选择在一起，这个问题应该慎之又慎，感情的问题，处理不好，就是一段伤，再怎么慎重都不为过。接下来我讲讲为什么选择这样子的人是非常重要的。</p><p>人生是充满酸甜苦辣各种味道的，这是一个基本的常识，然而我觉得好像并不是每个人都清楚这个问题。我以前认识一些女生，她们总觉得选择了一个人就应该是快乐永远幸福永远的，稍微有点常识的人都知道，这是不可能的事情，心理预期太高，碰上这样子的女生，无论多么喜欢，老实说我会躲得远远的，找这样的人，分手、离婚的风险太大。既然承认了人生充满酸甜苦辣各种味道这个观点，接下来的问题就是，碰上了生活的不如意该怎么办？我们每个人都或大或小有一些缺点，不可能是完人，既然有缺点，在人生不如意环境不好的时候，就特别容易出现问题。在这个时候，每个人都有自己的性格和脾气，能在发完火甚至吵架之后（当然男生应该好好控制自己的情绪啊），男的主动走出来哄自己的爱人，女的因为最初谨慎的选择从而知道目前这种状态并不是面前这个人的真实状态，依然不离不弃地彼此守候在一起，就像题图中的那幅画描述的那样，这才是一种幸福而现实的状态。所以，我们应该选择一个“真正的家人”跟自己在一起。什么是选对了人？幸福的时候比委屈的时候多，这就是选对了人，只有幸福几乎没有委屈，生活如果真是这样子，你信吗？相对于两个人幸福的时候，如何处理分歧更重要，分歧处理不好直接就散了。</p><p>还有就是彼此的可塑性很重要，人都有缺点，可塑性好的两个人在一起，会过得越来越舒服。老是听人说遇到一个合适的人之类的话，什么叫合适？遇上一个合适的是什么意思？即使有，每个人都能遇到么？相信我，比起遇到一个合适的人，变成一个合适的人更重要，变！！！</p><p>我还看到身边有一些急于找女朋友的男生，其实我觉得一个人首先要自己过得快乐，你自己都不能跟自己过得快乐的话，还指望谁能跟你在一起过得快乐呢？这句话女生也同样适用。要成为一个有趣的人而不是一个无趣的人。一个人独处的时候，是可以有很多精彩快乐的事情做的，我一个人的时候喜欢阅读、摄影、跑步、去KTV K歌、看电影等等，平时也喜欢读读诗什么的，我觉得挺快乐的。独处有独处的好处，两个人在一起也有两个人在一起的弊端，某些事情也只适合独处的时候做。学会跟自己相处，自己跟自己处出快乐，将来才会让另一半和自己生活的时候更快乐。不要着急。稳住。</p><p>最后说的算是一点题外话。</p><hr><p>本文发表在我的微信公众号《其叶湑湑》中，欢迎扫描以下二维码关注：</p><p><img src="http://wx2.sinaimg.cn/mw690/79225320gy1femfrz13hpj209k09kt8o.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/mw690/79225320gy1feplqy4ujuj20c80c874u.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前两天读完了东野奎吾的《解忧杂货店》，其中在这本书里讲述的一个故事一直萦绕在我的心头，很多思绪在脑海中翻腾，如鲠在喉，为了讲清楚我接下来围绕这个故事表述的想法，先介绍一下这个故事的大体情节。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.keeplearning.group/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="公众号" scheme="http://blog.keeplearning.group/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>heapq 和 lambda</title>
    <link href="http://blog.keeplearning.group/2017/01/22/2017/01-22-python-heapq&amp;lambda/"/>
    <id>http://blog.keeplearning.group/2017/01/22/2017/01-22-python-heapq&amp;lambda/</id>
    <published>2017-01-22T02:00:00.000Z</published>
    <updated>2018-11-07T07:10:41.483Z</updated>
    
    <content type="html"><![CDATA[<p>要想找出一组值中的最大、最小的 <code>n</code> 个值，就要利用到 <code>heapq</code> 中的 <code>nlargest()</code> 和 <code>nsmallest()</code> 两个函数：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"> </span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">0</span>]</span><br><span class="line">print(heapq.nlargest(<span class="number">3</span>, nums))    <span class="comment"># [9, 8, 7]</span></span><br><span class="line">print(heapq.nsmallest(<span class="number">3</span>, nums))   <span class="comment"># [0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>这两个函数都可以接受一个参数 <code>key</code>，从而允许它们工作在更加复杂的数据结构之上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"> </span><br><span class="line">portfolio = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cheap = heapq.nsmallest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</span><br><span class="line">expensive = heapq.nlargest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</span><br><span class="line"> </span><br><span class="line">print(cheap)</span><br><span class="line">print(expensive)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># [&#123;'name': 'YHOO', 'shares': 45, 'price': 16.35&#125;, &#123;'name': 'FB', 'shares': 200, 'price': 21.09&#125;, &#123;'name': 'HPQ', 'shares': 35, 'price': 31.75&#125;]</span></span><br><span class="line"><span class="comment"># [&#123;'name': 'AAPL', 'shares': 50, 'price': 543.22&#125;, &#123;'name': 'ACME', 'shares': 75, 'price': 115.65&#125;, &#123;'name': 'IBM', 'shares': 100, 'price': 91.1&#125;]</span></span><br></pre></td></tr></table></figure><p>上面的代码似乎有些难于理解，从 <a href="http://stackoverflow.com/questions/8966538/syntax-behind-sortedkey-lambda" target="_blank" rel="noopener">StackOverflow</a> 了解到，<code>lambada</code> 的作用是创建一个匿名函数，<code>lambda</code> 的后面跟着参数名列表，然后再在其后跟着一个代码块，参数名列表和代码块之间用分号隔开，这样子的结构在 <code>Python</code> 中与 <code>while</code>、<code>for</code> 和 <code>if</code>类似，它们都是拥有代码块的典型代表，<code>lambda</code> 只是另外一个代表而已。我们可以比较一下利用 <code>lambda</code> 和 <code>def</code> 定义函数的不同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adder_lambda = <span class="keyword">lambda</span> parameter1, parameter2: parameter1 + parameter2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adder_regular</span><span class="params">(parameter1, parameter2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> parameter1 + parameter2</span><br></pre></td></tr></table></figure><p><code>lambda</code> 给我们提供了一种完成类似这样子任务的方式而不用为函数取一个名字，相对于一个 <code>def</code> 定义的函数来说这样子要好得多。</p><p>对于 <code>nlargest</code> 和 <code>nsmallest</code> 两个函数中增加 <code>key</code> 参数，根据<a href="https://docs.python.org/3/library/heapq.html?highlight=heapq#module-heapq" target="_blank" rel="noopener"> <code>Python documentation</code></a> 中描述的那样，上面的两条语句分别相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cheap = sorted(portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])[:<span class="number">3</span>]</span><br><span class="line">expensive = sorted(portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>], reverse=<span class="keyword">True</span>)[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>为了验证正确性，不妨运行一下下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"> </span><br><span class="line">portfolio = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cheap = heapq.nsmallest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</span><br><span class="line">cheap_copy = sorted(portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])[:<span class="number">3</span>]</span><br><span class="line">expensive = heapq.nlargest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</span><br><span class="line">expensive_copy = sorted(portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>], reverse=<span class="keyword">True</span>)[:<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line">print(cheap == cheap_copy)    <span class="comment"># True</span></span><br><span class="line">print(expensive == expensive_copy)   <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>由此可见上面的说法是完全正确的。</p><p>需要特别注意的是，在 <code>nlargest</code> 和 <code>nsmallest</code> 函数中以及在 <code>sorted</code> 中的 <code>key</code> 返回的必须是具体的数值，切莫想当然地以为是 <code>price</code>，而是 <code>price</code> 的 <code>value</code>。</p><p>堆最重要的特性就是 <code>heap[0]</code> 总是最小的那个元素，此外，接下来的最小元素可以依次通过 <code>heapq.pop()</code> 方法轻松找到，该方法会将第一个元素（最小的）弹出，然后会以第二小的元素取而代之。当所要找的元素数量 N 相对较小时，函数 <code>nlargest()</code> 和 <code>nsmallest()</code> 才是最适用的。如果只是简单地想找到最小或最大的元素（N=1时），那么用 <code>min()</code> 和 <code>max()</code> 会更加快。同样，如果 N 和集合本身的大小差不多大，通常更快的方法是先对集合排序，然后做切片操作（例如使用 <code>sorted(items)[:N]</code> 或者 <code>sorted(items)[:-N]</code>。应该要注意的是，<code>nlargest()</code> 和 <code>nsmallest()</code> 的实际实现会根据使用它们的方式而有所不同，可能会相应作出一些优化措施（比如，当 N 的大小同输入大小很接近时，就会采用排序方法）。</p><p>可以使用 <code>heapify</code> 将一个列表转换成堆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">37</span>, <span class="number">2</span>]</span><br><span class="line">heap = list(nums)</span><br><span class="line">heapq.heapify(heap)</span><br><span class="line">print(heap)         <span class="comment"># [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要想找出一组值中的最大、最小的 &lt;code&gt;n&lt;/code&gt; 个值，就要利用到 &lt;code&gt;heapq&lt;/code&gt; 中的 &lt;code&gt;nlargest()&lt;/code&gt; 和 &lt;code&gt;nsmallest()&lt;/code&gt; 两个函数：&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>yield 和 deque</title>
    <link href="http://blog.keeplearning.group/2017/01/21/2017/01-21-python-yield&amp;deque/"/>
    <id>http://blog.keeplearning.group/2017/01/21/2017/01-21-python-yield&amp;deque/</id>
    <published>2017-01-21T02:00:00.000Z</published>
    <updated>2018-11-07T07:10:54.800Z</updated>
    
    <content type="html"><![CDATA[<p><code>yield</code> 相当于 <code>return</code>，是一个生成器，目前知道的就两点：</p><ul><li>返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始</li><li>值是一次性的，不可以被反复访问，返回一次后便丢失</li></ul><p><code>deque(maxlen=N)</code> 创建一个固定长度的队列。当有新纪录加入而队列已满时会自动移除最老的那条记录，当不指定 <code>maxlen</code> 时，则代表创建一个可变长的队列。</p><a id="more"></a><p>下面的代码对一系列文本做简单的文本匹配操作，当发现又匹配时就输出当前的匹配行以及最后检查到的那一行文本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(lines, pattern, history=<span class="number">5</span>)</span>:</span></span><br><span class="line">    previous_lines = deque(maxlen=history)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> pattern <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">yield</span> line, previous_lines</span><br><span class="line">        previous_lines.append(line)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Example use on a file</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'somefile.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line, prevlines <span class="keyword">in</span> search(f, <span class="string">'python'</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> pline <span class="keyword">in</span> prevlines:</span><br><span class="line">                print(pline, end=<span class="string">''</span>)</span><br><span class="line">            print(line, end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">'-'</span> * <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>somefile.txt 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a test file.</span><br><span class="line">This is a python test file.</span><br><span class="line">This is a python test file.</span><br><span class="line">This is a python test file.</span><br><span class="line">This is a python test file.</span><br><span class="line">This is a python test file.</span><br><span class="line">This is a python test file.</span><br><span class="line">This is a python test file.</span><br></pre></td></tr></table></figure><p>最后的输出结果为：</p><p><img src="http://wx1.sinaimg.cn/mw690/79225320gy1felyzlxnjyj20sg0hsq5q.jpg" alt=""></p><p>对于 <code>deque</code>，可以在两端执行添加和弹出操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"> </span><br><span class="line">q = deque()</span><br><span class="line">q.append(<span class="number">1</span>)</span><br><span class="line">q.appendleft(<span class="number">2</span>)</span><br><span class="line">q.append(<span class="number">3</span>)</span><br><span class="line">print(q)        <span class="comment"># deque([2, 1, 3])</span></span><br><span class="line">print(q.pop())   <span class="comment"># 3</span></span><br><span class="line">print(q.popleft())   <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><hr><p>参考：<a href="https://book.douban.com/subject/26381341/" target="_blank" rel="noopener">《Python Cookbook》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;yield&lt;/code&gt; 相当于 &lt;code&gt;return&lt;/code&gt;，是一个生成器，目前知道的就两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始&lt;/li&gt;
&lt;li&gt;值是一次性的，不可以被反复访问，返回一次后便丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;deque(maxlen=N)&lt;/code&gt; 创建一个固定长度的队列。当有新纪录加入而队列已满时会自动移除最老的那条记录，当不指定 &lt;code&gt;maxlen&lt;/code&gt; 时，则代表创建一个可变长的队列。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>从任意长度的可迭代对象中分解元素</title>
    <link href="http://blog.keeplearning.group/2017/01/18/2017/01-18-python-iterable/"/>
    <id>http://blog.keeplearning.group/2017/01/18/2017/01-18-python-iterable/</id>
    <published>2017-01-18T02:00:00.000Z</published>
    <updated>2018-11-07T07:11:07.567Z</updated>
    
    <content type="html"><![CDATA[<p>需要从某个可迭代对象中分解出 N 个元素，Python 的 “*表达式” 可以用来解决这个问题，有以下经典例子：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*trailing, current = [<span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>]</span><br><span class="line">print(trailing)</span><br><span class="line">print(current)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># [10, 8, 7, 1, 9, 5, 10]</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">records = [</span><br><span class="line">    (<span class="string">'foo'</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="string">'bar'</span>, <span class="string">'hello'</span>),</span><br><span class="line">    (<span class="string">'foo'</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'foo'</span>, x, y)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_bar</span><span class="params">(s)</span>:</span></span><br><span class="line">    print(<span class="string">'bar'</span>, s)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> tag, *args <span class="keyword">in</span> records:</span><br><span class="line">    <span class="keyword">if</span> tag == <span class="string">'foo'</span>:</span><br><span class="line">        do_foo(*args)</span><br><span class="line">    <span class="keyword">elif</span> tag == <span class="string">'bar'</span>:</span><br><span class="line">        do_bar(*args)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># foo 1 2</span></span><br><span class="line"><span class="comment"># bar hello</span></span><br><span class="line"><span class="comment"># foo 3 4</span></span><br></pre></td></tr></table></figure><p>当和某些特殊的字符串处理操作相结合，比如做拆分（splitting）操作时，这种*式的语法所支持的分解操作也非常有用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="string">'nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false'</span></span><br><span class="line">uname, *fields, homedir, sh = line.split(<span class="string">':'</span>)</span><br><span class="line">print(uname)</span><br><span class="line">print(homedir)</span><br><span class="line">print(sh)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># nobody</span></span><br><span class="line"><span class="comment"># /var/empty</span></span><br><span class="line"><span class="comment"># /usr/bin/false</span></span><br></pre></td></tr></table></figure><p>有时候可能想分解出某些值然后丢弃它们，可以使用诸如 <code>_</code> 或者 <code>ign</code>（ignored）等常用来表示待丢弃值的变量名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">record = (<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">123.45</span>, (<span class="number">12</span>, <span class="number">18</span>, <span class="number">2012</span>))</span><br><span class="line">name, *_, (*_, year) = record</span><br><span class="line">print(name)</span><br><span class="line">print(year)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># ACME</span></span><br><span class="line"><span class="comment"># 2012</span></span><br></pre></td></tr></table></figure><p>*表达式 在递归中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(items)</span>:</span></span><br><span class="line">    head, *tail = items</span><br><span class="line">    <span class="keyword">return</span> head + sum(tail) <span class="keyword">if</span> tail <span class="keyword">else</span> head</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">items = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">print(sum(items))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># 36</span></span><br></pre></td></tr></table></figure><p>其中 <code>return head + sum(tail) if tail else head</code>  的意思是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> tail:</span><br><span class="line">    <span class="keyword">return</span> head + sum(tail)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p>但是注意，递归不是 Python 的强项，这是因为其内在的递归限制所致，因此最后一个例子在实践中没有太大意义。</p><hr><p>参考：<a href="https://book.douban.com/subject/26381341/" target="_blank" rel="noopener">《Python Cookbook》</a> 及  <a href="http://stackoverflow.com/questions/26085990/i-dont-understand-this-python-sentence-if-tail-else-head" target="_blank" rel="noopener">http://stackoverflow.com/questions/26085990/i-dont-understand-this-python-sentence-if-tail-else-head</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要从某个可迭代对象中分解出 N 个元素，Python 的 “*表达式” 可以用来解决这个问题，有以下经典例子：&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python虚拟环境</title>
    <link href="http://blog.keeplearning.group/2016/09/29/2016/09-29-python-virtualenv/"/>
    <id>http://blog.keeplearning.group/2016/09/29/2016/09-29-python-virtualenv/</id>
    <published>2016-09-29T02:00:00.000Z</published>
    <updated>2018-11-07T07:11:20.486Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟环境是 Python 解释器的一个私有副本，在这个环境中你可以安装私有包，而且不会影响系统中安装的全局 Python 解释器。虚拟环境非常有用，可以在系统的 Python 解释器中避免包的混乱和版本的冲突。为每个程序单独创建虚拟环境可以保证程序只能访问虚拟环境中的包，从而保证全局解释器的干净整洁，使其只作为创建（更多）虚拟环境的源。使用虚拟环境还有个好处，那就是不需要管理员权限。</p><a id="more"></a><p>虚拟环境使用第三方实用工具 <code>virtualenv</code> 创建，在终端中输入以下命令可以检查系统是否安装了 <code>virtualenv</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><p>Ubuntu 用户可以使用下列命令安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-virtualenv</span><br></pre></td></tr></table></figure><p>如果是 Mac OS X （macOS）系统，就可以使用 <code>easy_install</code> 安装 <code>virtualenv</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install virtualenv</span><br></pre></td></tr></table></figure><p>注意：针对不同版本的 Python，可以使用不同版本的 <code>easy_install</code>，例如针对 Python 3.5，可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install-3.5 virtualenv</span><br></pre></td></tr></table></figure><p>在程序文件夹中使用 <code>virtualenv</code> 命令创建虚拟环境，这个命令只有一个必需的参数，即虚拟环境的名字。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字就是上述命令中指定的参数，与虚拟环境相关的文件都保存在这个子文件夹中。按照惯例，一般虚拟环境会被命名为 <code>venv</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><p>在程序文件夹中运行以上命令后，该文件夹中就有了一个名为 <code>venv</code> 的子文件夹，它保存一个全新的虚拟环境，其中有一个私有的 Python 解释器。在使用这个虚拟环境之前，你需要先将其“激活”。在 bash 中，可以使用下面的命令激活这个虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><p>虚拟环境被激活后，其中 Python 解释器的路径就被添加进了 PATH 中，但这种改变不是永久性的，它只会影响当前的命令行会话，为了提醒你已经激活了虚拟环境，激活虚拟环境的命令会修改命令行提示符，加入环境名：<br><code>(venv) $</code></p><p>当虚拟环境中的工作完成后，如果你想回到全局 Python 解释器中，可以在命令行提示符下输入 <code>deactivate</code>。</p><p>大多数 Python 包都使用 <code>pip</code> 实用工具安装，使用 <code>virtualenv</code> 创建虚拟环境时会自动安装 <code>pip</code>，激活虚拟环境后，<code>pip</code> 所在路径会自动添加进 PATH。</p><hr><p>此文参考<a href="https://book.douban.com/subject/26274202/" target="_blank" rel="noopener">《Flask Web 开发》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟环境是 Python 解释器的一个私有副本，在这个环境中你可以安装私有包，而且不会影响系统中安装的全局 Python 解释器。虚拟环境非常有用，可以在系统的 Python 解释器中避免包的混乱和版本的冲突。为每个程序单独创建虚拟环境可以保证程序只能访问虚拟环境中的包，从而保证全局解释器的干净整洁，使其只作为创建（更多）虚拟环境的源。使用虚拟环境还有个好处，那就是不需要管理员权限。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（十）</title>
    <link href="http://blog.keeplearning.group/2016/09/28/2016/09-28-python-notes10/"/>
    <id>http://blog.keeplearning.group/2016/09/28/2016/09-28-python-notes10/</id>
    <published>2016-09-28T02:00:00.000Z</published>
    <updated>2018-11-07T07:11:34.650Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>对函数测试</p><p>Python标准库中的模块 <code>unittest</code>提供了代码测试工具，单元测试用于核实函数的某个方面没有问题，测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。</p><a id="more"></a><p>要测试的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""接受名和姓并返回整洁的姓名."""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, last, middle=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Generate a neatly formatted full name."""</span></span><br><span class="line">    <span class="keyword">if</span> middle:</span><br><span class="line">        full_name = first + <span class="string">' '</span> + middle + <span class="string">' '</span> + last</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first + <span class="string">' '</span> + last</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""测试函数."""</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">"""测试name_function.py."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""是否能够正确处理姓名."""</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'janis'</span>, <span class="string">'joplin'</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Janis Joplin'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_middle_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""是否能够正确处理包含中间名的姓名."""</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'wolfgang'</span>, <span class="string">'mozart'</span>, <span class="string">'amadeus'</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Wolfgang Amadeus Mozart'</span>)</span><br><span class="line"> </span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p>要为函数编写测试用例，可先导入模块 <code>unittest</code> 以及要测试的函数，再创建一个继承 <code>unittest.TestCase</code> 的类，并编写一系列方法对函数行为的不同方面进行测试。在这里我们使用了 <code>unittest</code> 类最有用的功能之一：一个断言方法—— <code>assertEqual()</code> ，该断言方法用来核实得到的结果是否与期望的结果一致。</p><p><img src="http://wx4.sinaimg.cn/mw690/79225320gy1felgoswhavj20vs0fk403.jpg" alt="unittest Module中的断言方法"></p><ul><li>代码行 unittest.main() 让Python运行这个文件中的测试。</li><li>测试未通过时，不要修改测试，而应修复导致测试不能通过的代码。</li><li>方法名必须以  <code>test_</code> 打头，这样它才会在运行测试时自动运行。</li></ul></li><li><p>对类测试</p><p>需要进行测试的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""一个帮助管理匿名调查的类."""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""收集匿名调查问卷的答案."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, question)</span>:</span></span><br><span class="line">        <span class="string">"""存储一个问题，并为存储答案做准备."""</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示调查问卷."""</span></span><br><span class="line">        print(self.question)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self, new_response)</span>:</span></span><br><span class="line">        <span class="string">"""存储单份调查答卷."""</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示收集到的所有答案."""</span></span><br><span class="line">        print(<span class="string">"Survey results:"</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">'- '</span> + response)</span><br></pre></td></tr></table></figure><p>对类进行测试的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""author:王小平.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">date: 28/09/2016</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">"""针对AnonymousSurvey类的测试."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个调查对象和一组答案.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">        供使用的测试方法使用.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试单个答案会被妥善地存储."""</span></span><br><span class="line">        self.my_survey.store_response(<span class="string">'English'</span>)</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试三个答案会被妥善地存储."""</span></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response, self.my_survey.responses)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p><code>unittest.TestCase</code>类包含方法 <code>setUp()</code>，让我们只需创建这些对象一次，并在每个测试方法中使用它们。如果你在 <code>TestCase</code>类中包含了方法 <code>setUp()</code>，Python将先运行它，再运行各个以 <code>test_</code>打头的方法。这样，在你编写的每个测试方法中都可使用在方法 <code>setUp()</code>中创建的对象了。</p><p>方法 <code>setUp()</code> 做了两件事情：创建一个调查对象，创建一个答案列表。存储这两样东西的变量名包含前缀 <code>self</code>（即存储在属性中），因此可在这个类的任何地方使用。这让两个测试方法都更简单，因为它们都不用创建调查对象和答案。</p><p>测试编写的类时，方法 <code>setUp()</code> 让测试方法编写起来更容易：可在 <code>setUp()</code> 方法中创建一系列实例并设置它们的属性，再在测试方法中直接使用这些实例。相比于在每个测试方法中都创建实例并设置其属性，这要容易得多。</p></li><li><p>运行测试用例时，每完成一个单元测试，Python 都打印一个字符：测试通过时打印一个句点；测试引发错误时打印一个 <code>E</code>；测试导致断言失败时打印一个 <code>F</code>。这就是你运行测试用例时，在输出的第一行中看到的句点和字符数量各不相同的原因。如果测试用例包含很多单元测试，需要运行很长时间，就可通过观察这些结果来获悉有多少个测试通过了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;对函数测试&lt;/p&gt;
&lt;p&gt;Python标准库中的模块 &lt;code&gt;unittest&lt;/code&gt;提供了代码测试工具，单元测试用于核实函数的某个方面没有问题，测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（九）</title>
    <link href="http://blog.keeplearning.group/2016/09/19/2016/09-19-python-notes9/"/>
    <id>http://blog.keeplearning.group/2016/09/19/2016/09-19-python-notes9/</id>
    <published>2016-09-19T02:00:00.000Z</published>
    <updated>2018-11-07T07:11:47.919Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>打开文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""打开文件并打印内容."""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure><p>关键字 <code>with</code> 在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了函数 <code>open()</code> ，但没有调用 <code>close()</code> ；你也可以调用 <code>open()</code> 和 <code>close()</code> 来打开和关闭文件，但这样做时，如果程序存在 bug，导致 <code>close()</code> 语句未执行，文件将不会关闭，未妥善地关闭文件可能会导致数据丢失或受损。</p><a id="more"></a><p>通过前面使用的结构，可让 Python 确定关闭文件的恰当时机。</p><p><code>read()</code> 到达文件末尾时返回一个空的字符串，而将这个空的字符串显示出来就是一个空行，要删除多出来的空行，可在 <code>print</code> 语句中使用 <code>rstrip()</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(contents.rstrip())</span><br></pre></td></tr></table></figure></li><li><p>使用关键字 <code>with</code> 时， <code>open()</code> 返回的文件对象只在 <code>with</code> 代码块内可用。如果要在 <code>with</code> 代码块外访问文件的内容，可在 <code>with</code> 代码块内将文件的各行存储在一个列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""将文件中的各行存储在一个列表中."""</span></span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></li><li><p>读取文本文件时，Python 将其中的所有文本都解读为字符串。如果你读取的是数字，并要将其作为数值使用，就必须使用函数 <code>int()</code> 将其转换为整数，或使用函数 <code>float()</code> 将其转换为浮点数。</p></li><li><p>可使用 <code>replace()</code> 方法将字符串中的特定单词替换为另一个单词：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""替换字符串中的单词."""</span></span><br><span class="line"> </span><br><span class="line">message = <span class="string">"I really like dogs."</span></span><br><span class="line">print(message.replace(<span class="string">'dog'</span>, <span class="string">'cat'</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为</span></span><br><span class="line"><span class="comment"># I really like cats.</span></span><br></pre></td></tr></table></figure><p>然而 <code>message</code> 的内容并没有发生改变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""替换字符串中的单词."""</span></span><br><span class="line"> </span><br><span class="line">message = <span class="string">"I really like dogs."</span></span><br><span class="line">message.replace(<span class="string">'dog'</span>, <span class="string">'cat'</span>)</span><br><span class="line">print(message)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为</span></span><br><span class="line"><span class="comment"># I really like dogs.</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""写入空文件."""</span></span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br></pre></td></tr></table></figure><p>调用 <code>open()</code> 时提供了两个实参，第一个实参是要打开的文件的名称，第二个实参（<code>&#39;w&#39;</code>）告诉 Python，我们要以写入模式打开这个文件。打开文件时，可指定读取模式（<code>&#39;r&#39;</code>）、写入模式（<code>&#39;w&#39;</code>）、附加模式（<code>&#39;a&#39;</code>）或让你能够读取和写入文件的模式（<code>&#39;r+&#39;</code>）。</p><p>Python 只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数<code>str()</code> 将其转换为字符串格式。</p><p>写入多行时，末尾需要加上换行符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""写入多行."""</span></span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming.\n"</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love creating new games.\n"</span>)</span><br></pre></td></tr></table></figure><p>如果你要给文件添加内容，而不是覆盖原有的内容，可以附加模式打开文件，将你写入到文件的行都添加到末尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""附加到文件."""</span></span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'a'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I also love finding meaning in large datasets.\n"</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love creating apps that can run in a browser.\n"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为</span></span><br><span class="line"><span class="comment"># I love programming.</span></span><br><span class="line"><span class="comment"># I love creating new games.</span></span><br><span class="line"><span class="comment"># I also love finding meaning in large datasets.</span></span><br><span class="line"><span class="comment"># I love creating apps that can run in a browser.</span></span><br></pre></td></tr></table></figure></li><li><p>处理异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""处理异常."""</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"Second number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure><p>只有可能引发异常的代码才需要放在 <code>try</code> 语句中。</p><p>依赖于 <code>try</code> 代码块成功执行的代码都放在 <code>else</code> 代码块中，在这个示例中，如果除法运算成功，我们就使用 <code>else</code> 代码块来打印结果， <code>except</code> 代码块告诉 Python，如果出现<code>ZeroDivisionError</code> 异常时该怎么办。</p><p>处理找不到文件的异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""处理找不到文件的异常."""</span></span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'alice.txt'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure></li><li><p>方法 <code>split()</code> 以空格为分隔符将字符串分拆成多个部分，并将这些部分存储在一个列表中，结果是一个包含字符串中所有单词的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""split()方法."""</span></span><br><span class="line"> </span><br><span class="line">title = <span class="string">"Alice in Wonderland"</span></span><br><span class="line">words = title.split()</span><br><span class="line">print(words)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># ['Alice', 'in', 'Wonderland']</span></span><br></pre></td></tr></table></figure></li><li><p>存储和读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""存储数据."""</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""读取数据."""</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"> </span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开文件&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;打开文件并打印内容.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;pi_digits.txt&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; file_object:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    contents = file_object.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(contents)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关键字 &lt;code&gt;with&lt;/code&gt; 在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了函数 &lt;code&gt;open()&lt;/code&gt; ，但没有调用 &lt;code&gt;close()&lt;/code&gt; ；你也可以调用 &lt;code&gt;open()&lt;/code&gt; 和 &lt;code&gt;close()&lt;/code&gt; 来打开和关闭文件，但这样做时，如果程序存在 bug，导致 &lt;code&gt;close()&lt;/code&gt; 语句未执行，文件将不会关闭，未妥善地关闭文件可能会导致数据丢失或受损。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（八）</title>
    <link href="http://blog.keeplearning.group/2016/08/29/2016/08-29-python-notes8/"/>
    <id>http://blog.keeplearning.group/2016/08/29/2016/08-29-python-notes8/</id>
    <published>2016-08-29T02:00:00.000Z</published>
    <updated>2018-11-07T07:12:06.290Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在类的  <code>__init__()</code> 方法中，<code>self</code> 形参必不可少还必须位于其他行参的前面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""汽车类，存储有关汽车的信息.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">author: geekwang</span></span><br><span class="line"><span class="string">date: 2016/08/29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化描述汽车的属性."""</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回整洁的描述性信息."""</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>为类中的属性指定默认值</p><p>类中的每个属性都必须有初始值，有些情况下在方法 <code>__init__()</code> 中指定属性的初始值是可行的，无需包含为它提供初始值的行参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""汽车类，存储有关汽车的信息.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">author: geekwang</span></span><br><span class="line"><span class="string">date: 2016/08/29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化描述汽车的属性."""</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回整洁的描述性信息."""</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条指出汽车里程的消息."""</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"> </span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></li><li><p>创建子类时，父类必须包含在当前文件中，且位于子类的前面，子类必须在括号内指定父类的名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""汽车类，存储有关汽车的信息.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">author: geekwang</span></span><br><span class="line"><span class="string">date: 2016/08/29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">" "</span> + self.make + <span class="string">" "</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""电动汽车的独特之处."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""电动汽车的独特之处.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性(电瓶容量)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶容量的消息."""</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure></li><li><p>对于父类的方法，只要不符合子类模拟的实物的行为，都可以对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。</p></li><li><p>使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多，属性和方法清单以及文件都越来越长，在这种情况下，可能需要将类的一部分作为一个独立的类提取出来，可以将大型类拆分成多个协同工作的小类，将实例用作类的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""汽车类，存储有关汽车的信息.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">author: geekwang</span></span><br><span class="line"><span class="string">date: 2016/08/29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">" "</span> + self.make + <span class="string">" "</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟电动汽车电瓶的简单尝试."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, battery_size=<span class="number">70</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电瓶的属性."""</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶容量的消息."""</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""电动汽车的独特之处."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""电动汽车的独特之处.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性(电瓶容量)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery_size = Battery()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery_size.describe_battery()</span><br></pre></td></tr></table></figure></li><li><p>需要同时导入标准库中的模块和你编写的模块时，先编写导入标准模块的  <code>import</code>  语句，再添加一个空行，然后编写导入你自己编写的模块的  <code>import</code> 语句</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在类的  &lt;code&gt;__init__()&lt;/code&gt; 方法中，&lt;code&gt;self&lt;/code&gt; 形参必不可少还必须位于其他行参的前面：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;汽车类，存储有关汽车的信息.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;author: geekwang&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;date: 2016/08/29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;一次模拟汽车的简单尝试.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, make, model, year)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;初始化描述汽车的属性.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.make = make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.model = model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.year = year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_descriptive_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;返回整洁的描述性信息.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        long_name = str(self.year) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + self.make + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + self.model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; long_name.title()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_new_car = Car(&lt;span class=&quot;string&quot;&gt;&#39;audi&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a4&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(my_new_car.get_descriptive_name())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记（七）</title>
    <link href="http://blog.keeplearning.group/2016/08/28/2016/08-28-python-notes7/"/>
    <id>http://blog.keeplearning.group/2016/08/28/2016/08-28-python-notes7/</id>
    <published>2016-08-28T06:00:00.000Z</published>
    <updated>2018-11-07T07:12:36.514Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在函数中使用关键字实参时，关键字实参的顺序无关重要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line"> </span><br><span class="line">describe_pet(pet_name=<span class="string">"harry"</span>, animal_type=<span class="string">"hamster"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># I have a hamster.</span></span><br><span class="line"><span class="comment"># My hamster's name is Harry.</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参，这让 Python 能够正确地解读位置参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name, animal_type=<span class="string">'dog'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line"> </span><br><span class="line">describe_pet(<span class="string">'willie'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># I have a dog.</span></span><br><span class="line"><span class="comment"># My dog's name is Willie.</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>切片</strong> 禁止函数修改列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span><span class="params">(unprinted_designs, completed_models)</span>:</span></span><br><span class="line">    <span class="string">"""模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表 completed_models 中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 模拟根据设计制作 3D 打印模型的过程</span></span><br><span class="line">        print(<span class="string">"Printing model: "</span> + current_design)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span><span class="params">(completed_models)</span>:</span></span><br><span class="line">    <span class="string">"""显示打印好的所有模型"""</span></span><br><span class="line">    print(<span class="string">"\nThe following models have been printed:"</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        print(completed_model)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">unprinted_designs = [<span class="string">'iphone case'</span>, <span class="string">'robot pendant'</span>, <span class="string">'dodecahedron'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用切片可防止修改原始列表</span></span><br><span class="line">print_models(unprinted_designs[:], completed_models)</span><br><span class="line">print(unprinted_designs)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure></li><li><p>传递任意数量的实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    <span class="string">"""概述要制作的比萨"""</span></span><br><span class="line">    print(<span class="string">"\nMaking a pizza with the following toppings:"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Making a pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Making a pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure><p>形参名  <code>*toppings</code> 中的星号让 Python 创建一个名为  <code>toppings</code> 的 <strong>空元组</strong>，并将收到的所有值都封装到这个元组中。</p></li><li><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">    <span class="string">"""概述要制作的比萨"""</span></span><br><span class="line">    print(<span class="string">"\nMaking a "</span> + str(size) +</span><br><span class="line">          <span class="string">"_inch pizza with the following toppings:"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Making a 16_inch pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Making a 12_inch pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure></li><li><p>使用任意数量的关键字实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span></span><br><span class="line">    <span class="string">"""创建一个字典，其中包含我们所知道的有关用户的一切"""</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"> </span><br><span class="line">user_profile = build_profile(</span><br><span class="line">    <span class="string">'albert'</span>, <span class="string">'einstein'</span>, location=<span class="string">'princeton'</span>, field=<span class="string">'physics'</span>)</span><br><span class="line">print(user_profile)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># &#123;'first_name': 'albert', 'field': 'physics',</span></span><br><span class="line"><span class="comment">#  'last_name': 'einstein', 'location': 'princeton'&#125;</span></span><br></pre></td></tr></table></figure><p>形参 <code>**user_info</code> 中的两个星号让 Python 创建一个名为  <code>user_info</code> 的空字典，并将收到的所有 名称-值 对都封装到这个字典中。</p></li><li><p>使用 <code>as</code> 给函数、模块指定别名</p><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一名称，类似于外号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line"> </span><br><span class="line">mp(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">mp(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>你还可以给模块指定别名。通过给模块指定别名，让你能够更轻松地调用模块中的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</span><br><span class="line"> </span><br><span class="line">p.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">p.make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>使用星号（<code>*</code>）运算符可让 Python 导入模块中的所有函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>使用并非自己编写的大型模块时，最好不要采用这种导入方法：如果模块中有函数的名称与你的项目中使用的名称相同，可能导致意想不到的结果，Python 可能遇到多个名称相同的函数或变量，进而覆盖函数，而不是分别导入所有的函数。</p><p>最佳的做法是，要么只导入你需要使用的函数，要么导入整个模块并用句点表示法。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在函数中使用关键字实参时，关键字实参的顺序无关重要：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;describe_pet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(animal_type, pet_name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;\nI have a &quot;&lt;/span&gt; + animal_type + &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;My &quot;&lt;/span&gt; + animal_type + &lt;span class=&quot;string&quot;&gt;&quot;&#39;s name is &quot;&lt;/span&gt; + pet_name.title() + &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;describe_pet(pet_name=&lt;span class=&quot;string&quot;&gt;&quot;harry&quot;&lt;/span&gt;, animal_type=&lt;span class=&quot;string&quot;&gt;&quot;hamster&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# I have a hamster.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# My hamster&#39;s name is Harry.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Vim 中 indentLine 插件修改对齐字符</title>
    <link href="http://blog.keeplearning.group/2016/08/28/2016/08-28-vim-indentline/"/>
    <id>http://blog.keeplearning.group/2016/08/28/2016/08-28-vim-indentline/</id>
    <published>2016-08-28T02:00:00.000Z</published>
    <updated>2018-11-07T07:12:22.435Z</updated>
    
    <content type="html"><![CDATA[<p>完整的 Vim 配置教程请参阅我的博文：<a href="http://blog.qiyexuxu.com/2016/08/23/2016-08-23-vim-conf/" target="_blank" rel="noopener">Vim 开发环境配置</a>，下面是这篇博文的补充内容。</p><hr><p>正如 indentLine 的 <a href="https://github.com/Yggdroot/indentLine" target="_blank" rel="noopener">GitHub 主页</a> 上说的那样子，要自定义对齐字符，首先要下载安装 <a href="http://fontforge.github.io/en-US/" target="_blank" rel="noopener">FontForge</a>，Mac 下在安装之前需要首先安装 <a href="https://www.xquartz.org/" target="_blank" rel="noopener">XQuartz</a>，这两个软件都安装完成之后，按照官方所说的步骤操作如下：（将 Vim 原来使用的那个字体卸载掉，譬如我原来用的是 Monaco for Powerline，然后在网上重新把这个字体下载下来，经过下列操作后再重新安装新生成的字体）</p><a id="more"></a><blockquote><ol><li>Download and install FontForge.</li><li>Locate and open your terminal/gVim font.</li><li>Open the font in FontForge, choose <strong>Goto</strong> from the <strong>View</strong> menu and select <em>Private Use Area</em> from the drop down box.</li><li>In the private use area, locate a blank spot for the glyph. Make a note of the code, e.g. <code>U+E0A3</code>.</li><li>Double-click the selected code point to open the font drawing tool.</li><li>From the <strong>File</strong> menu, select <strong>Import…</strong> and locate the <em>indentLine-dotted-guide.eps</em> file.</li><li>Once imported, choose <strong>File</strong> -&gt; <strong>Generate Fonts</strong> and choose a location and file type for the new font.</li></ol></blockquote><p>在以上步骤中，可能会出现警告让你在 FontForge 的菜单栏中依次点击 <code>Element -&gt; Font Info... -&gt; General</code> 来修改 <code>Em Size</code> 的值为 <code>1000</code>，按它说的做。</p><p>在以上步骤中，生成字体的时候，选择以下字体类型：</p><p><img src="http://wx3.sinaimg.cn/mw690/79225320gy1fel4mcvqwhj20lc0xp4oa.jpg" alt="生成的字体类型"></p><p>找到新生成的字体并将其安装到系统中，修改 .vimrc 文件，将字体设置成刚才安装的新字体。用 FontForge 打开新生成的字体，找到你在步骤 6 中 import 的符号，右击，然后依次选择 <code>Glyph Info... -&gt; Unicode</code>，复制下面红色方框的内容：</p><p><img src="http://wx2.sinaimg.cn/mw690/79225320gy1fel4obb6q8j20rq0min2v.jpg" alt="复制该内容"></p><p>在 .vimrc 文件中，删除原来语句  <code>let g:indentLine_char = &#39;&#39;</code>  中单引号的内容（如果没有这条语句的话请新建它），将以上复制好的红色方框中的内容粘贴到单引号内，保存，重启 Vim，其缩进符号就可以得到下面这种使用 Patched font 的效果：</p><p><img src="http://wx2.sinaimg.cn/mw690/79225320gy1fel4qejk5sj20sg0ibwnv.jpg" alt="From https://github.com/Yggdroot/indentLine"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完整的 Vim 配置教程请参阅我的博文：&lt;a href=&quot;http://blog.qiyexuxu.com/2016/08/23/2016-08-23-vim-conf/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vim 开发环境配置&lt;/a&gt;，下面是这篇博文的补充内容。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;正如 indentLine 的 &lt;a href=&quot;https://github.com/Yggdroot/indentLine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub 主页&lt;/a&gt; 上说的那样子，要自定义对齐字符，首先要下载安装 &lt;a href=&quot;http://fontforge.github.io/en-US/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FontForge&lt;/a&gt;，Mac 下在安装之前需要首先安装 &lt;a href=&quot;https://www.xquartz.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XQuartz&lt;/a&gt;，这两个软件都安装完成之后，按照官方所说的步骤操作如下：（将 Vim 原来使用的那个字体卸载掉，譬如我原来用的是 Monaco for Powerline，然后在网上重新把这个字体下载下来，经过下列操作后再重新安装新生成的字体）&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.keeplearning.group/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vim" scheme="http://blog.keeplearning.group/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记（六）</title>
    <link href="http://blog.keeplearning.group/2016/08/26/2016/08-26-Python-notes6/"/>
    <id>http://blog.keeplearning.group/2016/08/26/2016/08-26-Python-notes6/</id>
    <published>2016-08-26T06:00:00.000Z</published>
    <updated>2018-11-07T07:12:51.725Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>有时候，<code>input()</code> 中的提示可能超过一行，在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数  <code>input()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"If you tell us who you are, we can personalize the message you see."</span></span><br><span class="line">prompt += <span class="string">"\nWhat is your first name? "</span></span><br><span class="line"> </span><br><span class="line">name = input(prompt)</span><br><span class="line">print(<span class="string">"\nHello, "</span> + name + <span class="string">"!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># If you tell us who you are, we can personalize the message you see.</span></span><br><span class="line"><span class="comment"># What is your first name? Eirc</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hello, Eirc!</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p><code>input()</code>  得到的是用户输入数值的字符串表示，可用  <code>int()</code>  获取真正的数值输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">"How old are you: "</span>)</span><br><span class="line">print(type(age))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># How old are you: 21</span></span><br><span class="line"><span class="comment"># &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">height = input(<span class="string">"How tall are you, in inches? "</span>)</span><br><span class="line">height = int(height)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> height &gt; <span class="number">36</span>:</span><br><span class="line">    print(<span class="string">"\nYou're tall enough to ride!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"\nYou'll be able to ride when you're a little older."</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># How tall are you, in inches? 71</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You're tall enough to ride!</span></span><br></pre></td></tr></table></figure><p>将数值输入用于计算和比较前，务必将其转换为数值表示。</p></li><li><p>在 Python 2.7 中获取输入应使用函数  <code>raw_input()</code> ，这个函数也将输入解读为字符串，Python 2.7 中也包含函数  <code>input()</code>，但它将用户输入解读为 Python 代码，并尝试运行它们。</p></li><li><p>在复杂的程序中，如果有很多事件都会导致程序停止运行，标志很有用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line"> </span><br><span class="line">active = <span class="keyword">True</span>   <span class="comment"># 设置标志</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = input(prompt)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 有两个让程序结束的事件</span></span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        active = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">elif</span> message == <span class="string">'exit'</span>:</span><br><span class="line">        active = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;有时候，&lt;code&gt;input()&lt;/code&gt; 中的提示可能超过一行，在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数  &lt;code&gt;input()&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;prompt = &lt;span class=&quot;string&quot;&gt;&quot;If you tell us who you are, we can personalize the message you see.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prompt += &lt;span class=&quot;string&quot;&gt;&quot;\nWhat is your first name? &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = input(prompt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;\nHello, &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# If you tell us who you are, we can personalize the message you see.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# What is your first name? Eirc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Hello, Eirc!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记（五）</title>
    <link href="http://blog.keeplearning.group/2016/08/26/2016/08-26-Python-notes5/"/>
    <id>http://blog.keeplearning.group/2016/08/26/2016/08-26-Python-notes5/</id>
    <published>2016-08-26T02:00:00.000Z</published>
    <updated>2018-11-07T07:13:03.797Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>遍历字典中的键－值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'efermi'</span>,</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'enrico'</span>,</span><br><span class="line">    <span class="string">'last'</span>: <span class="string">'fermi'</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line">    print(<span class="string">"Value: "</span> + value)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Key: first</span></span><br><span class="line"><span class="comment"># Value: enrico</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Key: last</span></span><br><span class="line"><span class="comment"># Value: fermi</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Key: username</span></span><br><span class="line"><span class="comment"># Value: efermi</span></span><br></pre></td></tr></table></figure><p>键－值对的返回顺序不一定与存储顺序相同。</p></li></ol><a id="more"></a><ol start="2"><li><p>遍历字典中的键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    print(name.title())</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"\n默认遍历键："</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages:</span><br><span class="line">    print(name.title())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Jen</span></span><br><span class="line"><span class="comment"># Edward</span></span><br><span class="line"><span class="comment"># Sarah</span></span><br><span class="line"><span class="comment"># Phil</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 默认遍历键：</span></span><br><span class="line"><span class="comment"># Jen</span></span><br><span class="line"><span class="comment"># Edward</span></span><br><span class="line"><span class="comment"># Sarah</span></span><br><span class="line"><span class="comment"># Phil</span></span><br></pre></td></tr></table></figure></li><li><p>使用  <code>values()</code>  方法遍历字典中的所有值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"The following languages have been metioned:"</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    print(language.title())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># The following languages have been metioned:</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># C</span></span><br></pre></td></tr></table></figure><p>使用集合（<code>set()</code>）去除重复项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"The following languages have been metioned:"</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> set(favorite_languages.values()):</span><br><span class="line">    print(language.title())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># The following languages have been metioned:</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;遍历字典中的键－值对：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user_0 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;efermi&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;first&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;enrico&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;last&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;fermi&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; user_0.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;\nKey: &quot;&lt;/span&gt; + key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;Value: &quot;&lt;/span&gt; + value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 结果为：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Key: first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Value: enrico&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Key: last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Value: fermi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Key: username&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Value: efermi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;键－值对的返回顺序不一定与存储顺序相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记（四）</title>
    <link href="http://blog.keeplearning.group/2016/08/25/2016/08-25-Python-notes4/"/>
    <id>http://blog.keeplearning.group/2016/08/25/2016/08-25-Python-notes4/</id>
    <published>2016-08-25T08:00:00.000Z</published>
    <updated>2018-11-07T07:13:14.302Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>用 <code>in</code> 和 <code>not in</code> 检查特定值是否包含在列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'onions'</span>, <span class="string">'pineapple'</span>]</span><br><span class="line">print(<span class="string">'mushrooms'</span> <span class="keyword">in</span> requested_toppings)  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'pepperoni'</span> <span class="keyword">in</span> requested_toppings)  <span class="comment"># False</span></span><br><span class="line"> </span><br><span class="line">banned_users = [<span class="string">'andrew'</span>, <span class="string">'carolina'</span>, <span class="string">'david'</span>]</span><br><span class="line">user = <span class="string">'marie'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> banned_users:</span><br><span class="line">    print(user.title() + <span class="string">", you can post a response if you wish."</span>)</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>下面这段程序  <code>str()</code>  是必须的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"Your admission cost is $"</span> + str(price) + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;in&lt;/code&gt; 和 &lt;code&gt;not in&lt;/code&gt; 检查特定值是否包含在列表中：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;requested_toppings = [&lt;span class=&quot;string&quot;&gt;&#39;mushrooms&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;onions&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pineapple&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;mushrooms&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; requested_toppings)  &lt;span class=&quot;comment&quot;&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;pepperoni&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; requested_toppings)  &lt;span class=&quot;comment&quot;&gt;# False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;banned_users = [&lt;span class=&quot;string&quot;&gt;&#39;andrew&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;carolina&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;david&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user = &lt;span class=&quot;string&quot;&gt;&#39;marie&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; user &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; banned_users:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(user.title() + &lt;span class=&quot;string&quot;&gt;&quot;, you can post a response if you wish.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记（三）</title>
    <link href="http://blog.keeplearning.group/2016/08/25/2016/08-25-Python-notes3/"/>
    <id>http://blog.keeplearning.group/2016/08/25/2016/08-25-Python-notes3/</id>
    <published>2016-08-25T06:00:00.000Z</published>
    <updated>2018-11-07T07:13:27.507Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>使用函数  <code>range()</code> 生成一系列的数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    print(value)</span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>还可以指定步长，使用函数  <code>list()</code>  将  <code>range()</code> 的值直接转换为列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">even_number = list(range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line">print(even_number)    <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>找出数字列表的最大值、最小值和总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">print(min(digits))   <span class="comment"># 0</span></span><br><span class="line">print(max(digits))   <span class="comment"># 9</span></span><br><span class="line">print(sum(digits))   <span class="comment"># 45</span></span><br></pre></td></tr></table></figure></li><li><p>列表解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)    <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></li><li><p>列表切片访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line">print(players[<span class="number">1</span>:<span class="number">4</span>])    <span class="comment"># ['martina', 'michael', 'florence']</span></span><br><span class="line">print(players[:<span class="number">3</span>])  <span class="comment"># ['charles', 'martina', 'michael']</span></span><br><span class="line">print(players[<span class="number">3</span>:])  <span class="comment"># ['florence', 'eli']</span></span><br><span class="line">print(players[<span class="number">-3</span>:])  <span class="comment"># 打印最后三个 ['michael', 'florence', 'eli']</span></span><br></pre></td></tr></table></figure><ul><li>没有指定起始索引，从开头开始提取</li><li>没有指定终止索引，一直到列表末尾</li></ul></li><li><p>列表的复制：</p><ul><li><p>利用切片复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line"> </span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"My favorite foods are:"</span>)</span><br><span class="line">print(my_foods)  <span class="comment"># ['pizza', 'falafel', 'carrot cake', 'cannoli']</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)  <span class="comment"># ['pizza', 'falafel', 'carrot cake', 'ice cream']</span></span><br></pre></td></tr></table></figure></li><li><p>两个变量同时关联同一列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods</span><br><span class="line"> </span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"My favorite foods are:"</span>)</span><br><span class="line">print(my_foods)   <span class="comment"># ['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)  <span class="comment"># ['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表是可以修改的，不可变的列表称为元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">dimensions[<span class="number">0</span>] = <span class="number">250</span>   <span class="comment"># 出现错误</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用函数  &lt;code&gt;range()&lt;/code&gt; 生成一系列的数字：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 结果为：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还可以指定步长，使用函数  &lt;code&gt;list()&lt;/code&gt;  将  &lt;code&gt;range()&lt;/code&gt; 的值直接转换为列表：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;even_number = list(range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(even_number)    &lt;span class=&quot;comment&quot;&gt;# [2, 4, 6, 8, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://blog.keeplearning.group/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://blog.keeplearning.group/tags/Python/"/>
    
  </entry>
  
</feed>
